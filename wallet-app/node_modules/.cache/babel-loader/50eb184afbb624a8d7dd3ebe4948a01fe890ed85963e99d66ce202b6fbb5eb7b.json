{"ast":null,"code":"import _objectSpread from\"C:/Cold_Wallet/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";/**\r\n * İşlem İzleme ve Bildirim Sistemi\r\n */const MAX_PENDING_TXS=50;// İzlenecek maksimum işlem sayısı\nclass TransactionMonitor{constructor(){this.pendingTransactions=[];this.checkInterval=null;this.listeners=[];}// İzleme başlat\nstartMonitoring(){let checkIntervalMs=arguments.length>0&&arguments[0]!==undefined?arguments[0]:30000;if(this.checkInterval){this.stopMonitoring();}this.checkInterval=setInterval(()=>{this.checkTransactionStatuses();},checkIntervalMs);console.log(\"Transaction monitor started with \".concat(checkIntervalMs,\"ms interval\"));}// İzleme durdur\nstopMonitoring(){if(this.checkInterval){clearInterval(this.checkInterval);this.checkInterval=null;console.log('Transaction monitor stopped');}}// İşlem ekle\naddTransaction(transaction){// İşlemin temel bilgilerini kontrol et\nif(!transaction||!transaction.id||!transaction.network){console.error('Invalid transaction format:',transaction);return false;}// Zaten izlenen bir işlemse atla\nif(this.pendingTransactions.some(tx=>tx.id===transaction.id)){console.log(\"Transaction \".concat(transaction.id,\" is already being monitored\"));return false;}// Maksimum işlem sayısını aşarsa en eskiyi kaldır\nif(this.pendingTransactions.length>=MAX_PENDING_TXS){this.pendingTransactions.shift();// En eski işlemi kaldır\n}this.pendingTransactions.push(_objectSpread(_objectSpread({},transaction),{},{addedAt:Date.now(),lastChecked:null,checkCount:0}));console.log(\"Transaction \".concat(transaction.id,\" added to monitor\"));return true;}// İşlem kaldır\nremoveTransaction(txId){const initialLength=this.pendingTransactions.length;this.pendingTransactions=this.pendingTransactions.filter(tx=>tx.id!==txId);if(this.pendingTransactions.length<initialLength){console.log(\"Transaction \".concat(txId,\" removed from monitor\"));return true;}return false;}// İşlem durumunu kontrol et\nasync checkTransactionStatuses(){if(this.pendingTransactions.length===0){return;}console.log(\"Checking status of \".concat(this.pendingTransactions.length,\" pending transactions\"));// Her ağ için işlemleri grupla\nconst txsByNetwork=this.pendingTransactions.reduce((groups,tx)=>{const network=tx.network;if(!groups[network]){groups[network]=[];}groups[network].push(tx);return groups;},{});// Her ağ için işlemleri kontrol et\nfor(const[network,transactions]of Object.entries(txsByNetwork)){try{await this.checkNetworkTransactions(network,transactions);}catch(error){console.error(\"Error checking \".concat(network,\" transactions:\"),error);}}}// Bir ağ için tüm işlemleri kontrol et\nasync checkNetworkTransactions(network,transactions){if(!window.walletAPI){console.warn(\"walletAPI not found, cannot check transaction status\");return;}// İşlem ID'lerini al\nconst txIds=transactions.map(tx=>tx.id);try{// Burada batch olarak işlemleri kontrol edebiliriz\n// wallet-engine bu özelliği desteklemiyorsa her işlemi tek tek kontrol et\nfor(const tx of transactions){await this.checkSingleTransaction(tx);}}catch(error){console.error(\"Error checking \".concat(network,\" transactions:\"),error);}}// Tek bir işlemi kontrol et\nasync checkSingleTransaction(tx){try{// İşlem durumunu wallet-engine'den al\nconst response=await window.walletAPI.getTransactionStatus(tx.network,tx.id);// İşlem durumu değişmişse event bildir\nif(response.success&&response.status!==tx.status){const oldStatus=tx.status;const newStatus=response.status;// İşlem güncelle\nconst updatedTx=_objectSpread(_objectSpread({},tx),{},{status:newStatus,confirmations:response.confirmations||0,lastChecked:Date.now(),checkCount:tx.checkCount+1});// İşlem tamamlanmış veya başarısız olmuşsa izlemeden kaldır\nif(newStatus==='completed'||newStatus==='failed'){this.removeTransaction(tx.id);}else{// İzleme listesinde güncelle\nthis.updateTransaction(updatedTx);}// Durum değişikliğini bildir\nthis.notifyStatusChange(updatedTx,oldStatus,newStatus);}else{// Güncelleme yok, sadece kontrol sayısını artır\nthis.updateTransaction(_objectSpread(_objectSpread({},tx),{},{lastChecked:Date.now(),checkCount:tx.checkCount+1}));}}catch(error){console.error(\"Error checking transaction \".concat(tx.id,\":\"),error);}}// İşlem bilgilerini güncelle\nupdateTransaction(updatedTx){this.pendingTransactions=this.pendingTransactions.map(tx=>tx.id===updatedTx.id?updatedTx:tx);}// İşlem durumu değişikliği bildirimini gönder\nnotifyStatusChange(transaction,oldStatus,newStatus){// Event listener'lara bildir\nthis.listeners.forEach(listener=>{try{listener({transaction,oldStatus,newStatus});}catch(error){console.error('Error notifying transaction listener:',error);}});// İşlem tamamlandıysa bildirim göster\nif(newStatus==='completed'){this.showCompletionNotification(transaction);}}// İşlem tamamlanma bildirimi göster\nshowCompletionNotification(transaction){if(!('Notification'in window)){console.log('Bildirimler bu tarayıcıda desteklenmiyor');return;}// Bildirim izni kontrol et\nif(Notification.permission==='granted'){this.createNotification(transaction);}else if(Notification.permission!=='denied'){Notification.requestPermission().then(permission=>{if(permission==='granted'){this.createNotification(transaction);}});}}// Bildirim oluştur\ncreateNotification(transaction){const{type,amount,currency}=transaction;const title=type==='send'?'Gönderim Tamamlandı':'Alım Tamamlandı';const options={body:\"\".concat(amount,\" \").concat(currency,\" i\\u015Flemi ba\\u015Far\\u0131yla tamamland\\u0131.\"),icon:'/favicon.ico',badge:'/favicon.ico'};const notification=new Notification(title,options);notification.onclick=function(){window.focus();notification.close();};}// İşlem durumu bildirim listenerı ekle\naddStatusChangeListener(listener){if(typeof listener!=='function'){throw new Error('Listener must be a function');}this.listeners.push(listener);return()=>this.removeStatusChangeListener(listener);}// İşlem durumu bildirim listenerı kaldır\nremoveStatusChangeListener(listener){this.listeners=this.listeners.filter(l=>l!==listener);}// İzlenen işlemleri al\ngetPendingTransactions(){return[...this.pendingTransactions];}// Test modu simülasyonu\nsimulateStatusChange(txId,newStatus){const tx=this.pendingTransactions.find(t=>t.id===txId);if(tx){const oldStatus=tx.status;tx.status=newStatus;this.notifyStatusChange(tx,oldStatus,newStatus);if(newStatus==='completed'||newStatus==='failed'){this.removeTransaction(txId);}return true;}return false;}}// Singleton instance\nexport default new TransactionMonitor();","map":{"version":3,"names":["MAX_PENDING_TXS","TransactionMonitor","constructor","pendingTransactions","checkInterval","listeners","startMonitoring","checkIntervalMs","arguments","length","undefined","stopMonitoring","setInterval","checkTransactionStatuses","console","log","concat","clearInterval","addTransaction","transaction","id","network","error","some","tx","shift","push","_objectSpread","addedAt","Date","now","lastChecked","checkCount","removeTransaction","txId","initialLength","filter","txsByNetwork","reduce","groups","transactions","Object","entries","checkNetworkTransactions","window","walletAPI","warn","txIds","map","checkSingleTransaction","response","getTransactionStatus","success","status","oldStatus","newStatus","updatedTx","confirmations","updateTransaction","notifyStatusChange","forEach","listener","showCompletionNotification","Notification","permission","createNotification","requestPermission","then","type","amount","currency","title","options","body","icon","badge","notification","onclick","focus","close","addStatusChangeListener","Error","removeStatusChangeListener","l","getPendingTransactions","simulateStatusChange","find","t"],"sources":["C:/Cold_Wallet/wallet-app/src/utils/TransactionMonitor.js"],"sourcesContent":["/**\r\n * İşlem İzleme ve Bildirim Sistemi\r\n */\r\n\r\nconst MAX_PENDING_TXS = 50; // İzlenecek maksimum işlem sayısı\r\n\r\nclass TransactionMonitor {\r\n  constructor() {\r\n    this.pendingTransactions = [];\r\n    this.checkInterval = null;\r\n    this.listeners = [];\r\n  }\r\n  \r\n  // İzleme başlat\r\n  startMonitoring(checkIntervalMs = 30000) {\r\n    if (this.checkInterval) {\r\n      this.stopMonitoring();\r\n    }\r\n    \r\n    this.checkInterval = setInterval(() => {\r\n      this.checkTransactionStatuses();\r\n    }, checkIntervalMs);\r\n    \r\n    console.log(`Transaction monitor started with ${checkIntervalMs}ms interval`);\r\n  }\r\n  \r\n  // İzleme durdur\r\n  stopMonitoring() {\r\n    if (this.checkInterval) {\r\n      clearInterval(this.checkInterval);\r\n      this.checkInterval = null;\r\n      console.log('Transaction monitor stopped');\r\n    }\r\n  }\r\n  \r\n  // İşlem ekle\r\n  addTransaction(transaction) {\r\n    // İşlemin temel bilgilerini kontrol et\r\n    if (!transaction || !transaction.id || !transaction.network) {\r\n      console.error('Invalid transaction format:', transaction);\r\n      return false;\r\n    }\r\n    \r\n    // Zaten izlenen bir işlemse atla\r\n    if (this.pendingTransactions.some(tx => tx.id === transaction.id)) {\r\n      console.log(`Transaction ${transaction.id} is already being monitored`);\r\n      return false;\r\n    }\r\n    \r\n    // Maksimum işlem sayısını aşarsa en eskiyi kaldır\r\n    if (this.pendingTransactions.length >= MAX_PENDING_TXS) {\r\n      this.pendingTransactions.shift(); // En eski işlemi kaldır\r\n    }\r\n    \r\n    this.pendingTransactions.push({\r\n      ...transaction,\r\n      addedAt: Date.now(),\r\n      lastChecked: null,\r\n      checkCount: 0\r\n    });\r\n    \r\n    console.log(`Transaction ${transaction.id} added to monitor`);\r\n    return true;\r\n  }\r\n  \r\n  // İşlem kaldır\r\n  removeTransaction(txId) {\r\n    const initialLength = this.pendingTransactions.length;\r\n    this.pendingTransactions = this.pendingTransactions.filter(tx => tx.id !== txId);\r\n    \r\n    if (this.pendingTransactions.length < initialLength) {\r\n      console.log(`Transaction ${txId} removed from monitor`);\r\n      return true;\r\n    }\r\n    \r\n    return false;\r\n  }\r\n  \r\n  // İşlem durumunu kontrol et\r\n  async checkTransactionStatuses() {\r\n    if (this.pendingTransactions.length === 0) {\r\n      return;\r\n    }\r\n    \r\n    console.log(`Checking status of ${this.pendingTransactions.length} pending transactions`);\r\n    \r\n    // Her ağ için işlemleri grupla\r\n    const txsByNetwork = this.pendingTransactions.reduce((groups, tx) => {\r\n      const network = tx.network;\r\n      if (!groups[network]) {\r\n        groups[network] = [];\r\n      }\r\n      \r\n      groups[network].push(tx);\r\n      return groups;\r\n    }, {});\r\n    \r\n    // Her ağ için işlemleri kontrol et\r\n    for (const [network, transactions] of Object.entries(txsByNetwork)) {\r\n      try {\r\n        await this.checkNetworkTransactions(network, transactions);\r\n      } catch (error) {\r\n        console.error(`Error checking ${network} transactions:`, error);\r\n      }\r\n    }\r\n  }\r\n  \r\n  // Bir ağ için tüm işlemleri kontrol et\r\n  async checkNetworkTransactions(network, transactions) {\r\n    if (!window.walletAPI) {\r\n      console.warn(\"walletAPI not found, cannot check transaction status\");\r\n      return;\r\n    }\r\n    \r\n    // İşlem ID'lerini al\r\n    const txIds = transactions.map(tx => tx.id);\r\n    \r\n    try {\r\n      // Burada batch olarak işlemleri kontrol edebiliriz\r\n      // wallet-engine bu özelliği desteklemiyorsa her işlemi tek tek kontrol et\r\n      for (const tx of transactions) {\r\n        await this.checkSingleTransaction(tx);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error checking ${network} transactions:`, error);\r\n    }\r\n  }\r\n  \r\n  // Tek bir işlemi kontrol et\r\n  async checkSingleTransaction(tx) {\r\n    try {\r\n      // İşlem durumunu wallet-engine'den al\r\n      const response = await window.walletAPI.getTransactionStatus(tx.network, tx.id);\r\n      \r\n      // İşlem durumu değişmişse event bildir\r\n      if (response.success && response.status !== tx.status) {\r\n        const oldStatus = tx.status;\r\n        const newStatus = response.status;\r\n        \r\n        // İşlem güncelle\r\n        const updatedTx = {\r\n          ...tx,\r\n          status: newStatus,\r\n          confirmations: response.confirmations || 0,\r\n          lastChecked: Date.now(),\r\n          checkCount: tx.checkCount + 1\r\n        };\r\n        \r\n        // İşlem tamamlanmış veya başarısız olmuşsa izlemeden kaldır\r\n        if (newStatus === 'completed' || newStatus === 'failed') {\r\n          this.removeTransaction(tx.id);\r\n        } else {\r\n          // İzleme listesinde güncelle\r\n          this.updateTransaction(updatedTx);\r\n        }\r\n        \r\n        // Durum değişikliğini bildir\r\n        this.notifyStatusChange(updatedTx, oldStatus, newStatus);\r\n      } else {\r\n        // Güncelleme yok, sadece kontrol sayısını artır\r\n        this.updateTransaction({\r\n          ...tx,\r\n          lastChecked: Date.now(),\r\n          checkCount: tx.checkCount + 1\r\n        });\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error checking transaction ${tx.id}:`, error);\r\n    }\r\n  }\r\n  \r\n  // İşlem bilgilerini güncelle\r\n  updateTransaction(updatedTx) {\r\n    this.pendingTransactions = this.pendingTransactions.map(tx => \r\n      tx.id === updatedTx.id ? updatedTx : tx\r\n    );\r\n  }\r\n  \r\n  // İşlem durumu değişikliği bildirimini gönder\r\n  notifyStatusChange(transaction, oldStatus, newStatus) {\r\n    // Event listener'lara bildir\r\n    this.listeners.forEach(listener => {\r\n      try {\r\n        listener({\r\n          transaction,\r\n          oldStatus,\r\n          newStatus\r\n        });\r\n      } catch (error) {\r\n        console.error('Error notifying transaction listener:', error);\r\n      }\r\n    });\r\n    \r\n    // İşlem tamamlandıysa bildirim göster\r\n    if (newStatus === 'completed') {\r\n      this.showCompletionNotification(transaction);\r\n    }\r\n  }\r\n  \r\n  // İşlem tamamlanma bildirimi göster\r\n  showCompletionNotification(transaction) {\r\n    if (!('Notification' in window)) {\r\n      console.log('Bildirimler bu tarayıcıda desteklenmiyor');\r\n      return;\r\n    }\r\n    \r\n    // Bildirim izni kontrol et\r\n    if (Notification.permission === 'granted') {\r\n      this.createNotification(transaction);\r\n    } \r\n    else if (Notification.permission !== 'denied') {\r\n      Notification.requestPermission().then(permission => {\r\n        if (permission === 'granted') {\r\n          this.createNotification(transaction);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  // Bildirim oluştur\r\n  createNotification(transaction) {\r\n    const { type, amount, currency } = transaction;\r\n    \r\n    const title = type === 'send' \r\n      ? 'Gönderim Tamamlandı' \r\n      : 'Alım Tamamlandı';\r\n      \r\n    const options = {\r\n      body: `${amount} ${currency} işlemi başarıyla tamamlandı.`,\r\n      icon: '/favicon.ico',\r\n      badge: '/favicon.ico'\r\n    };\r\n    \r\n    const notification = new Notification(title, options);\r\n    \r\n    notification.onclick = function() {\r\n      window.focus();\r\n      notification.close();\r\n    };\r\n  }\r\n  \r\n  // İşlem durumu bildirim listenerı ekle\r\n  addStatusChangeListener(listener) {\r\n    if (typeof listener !== 'function') {\r\n      throw new Error('Listener must be a function');\r\n    }\r\n    \r\n    this.listeners.push(listener);\r\n    return () => this.removeStatusChangeListener(listener);\r\n  }\r\n  \r\n  // İşlem durumu bildirim listenerı kaldır\r\n  removeStatusChangeListener(listener) {\r\n    this.listeners = this.listeners.filter(l => l !== listener);\r\n  }\r\n  \r\n  // İzlenen işlemleri al\r\n  getPendingTransactions() {\r\n    return [...this.pendingTransactions];\r\n  }\r\n  \r\n  // Test modu simülasyonu\r\n  simulateStatusChange(txId, newStatus) {\r\n    const tx = this.pendingTransactions.find(t => t.id === txId);\r\n    if (tx) {\r\n      const oldStatus = tx.status;\r\n      tx.status = newStatus;\r\n      this.notifyStatusChange(tx, oldStatus, newStatus);\r\n      \r\n      if (newStatus === 'completed' || newStatus === 'failed') {\r\n        this.removeTransaction(txId);\r\n      }\r\n      \r\n      return true;\r\n    }\r\n    return false;\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport default new TransactionMonitor();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}