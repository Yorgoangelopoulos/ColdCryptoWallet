{"ast":null,"code":"import _objectSpread from\"C:/Cold_Wallet/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import'../styles/Dashboard.css';import AssetList from'./Dashboard/AssetList';import AssetDetail from'./Dashboard/AssetDetail';import WalletHeader from'./Dashboard/WalletHeader';import SideMenu from'./Dashboard/SideMenu';import SendModal from'./SendModal';import ReceiveModal from'./ReceiveModal';import SettingsModal from'./SettingsModal';import BlockchainAPI from'../services/BlockchainAPI';import TokenAddModal from'../components/TokenAddModal';import TitleBar from'./TitleBar';// Token tanımları\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const TOKEN_DEFINITIONS={'USDT-TRC20':{id:'tether_trc20',name:'Tether USD',symbol:'USDT',network:'TRX',tokenAddress:'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t',// USDT-TRC20 kontrat adresi\ndecimals:6},'USDT-ERC20':{id:'tether_erc20',name:'Tether USD',symbol:'USDT',network:'ETH',tokenAddress:'0xdAC17F958D2ee523a2206206994597C13D831ec7',// USDT-ERC20 kontrat adresi\ndecimals:6},'USDC-ERC20':{id:'usdc_erc20',name:'USD Coin',symbol:'USDC',network:'ETH',tokenAddress:'0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',decimals:6},'DAI-ERC20':{id:'dai_erc20',name:'Dai Stablecoin',symbol:'DAI',network:'ETH',tokenAddress:'0x6B175474E89094C44Da98b954EedeAC495271d0F',decimals:18},'LINK-ERC20':{id:'link_erc20',name:'Chainlink',symbol:'LINK',network:'ETH',tokenAddress:'0x514910771AF9Ca656af840dff83E8264EcF986CA',decimals:18},'UNI-ERC20':{id:'uni_erc20',name:'Uniswap',symbol:'UNI',network:'ETH',tokenAddress:'0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',decimals:18},'BTT-TRC20':{id:'btt_trc20',name:'BitTorrent',symbol:'BTT',network:'TRX',tokenAddress:'TAFjULxiVgT4qWk6UZwjqwZXTSaGaqnVp4',decimals:18},'WIN-TRC20':{id:'win_trc20',name:'WINkLink',symbol:'WIN',network:'TRX',tokenAddress:'TLa2f6VPqDgRE67v1736s7bJ8Ray5wYjU7',decimals:6},'USDT-BEP20':{id:'tether_bep20',name:'Tether USD',symbol:'USDT',network:'BSC',tokenAddress:'0x55d398326f99059fF775485246999027B3197955',decimals:18},'BUSD-BEP20':{id:'busd_bep20',name:'Binance USD',symbol:'BUSD',network:'BSC',tokenAddress:'0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',decimals:18},'CAKE-BEP20':{id:'cake_bep20',name:'PancakeSwap',symbol:'CAKE',network:'BSC',tokenAddress:'0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',decimals:18}};// Başlangıç cüzdan durumu\nconst initialWalletState={totalBalance:0,networks:[{id:'bitcoin',name:'Bitcoin',symbol:'BTC',iconUrl:require('../assets/btc.png'),balance:0,price:40000,change24h:2.5,addresses:['1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa'],isFavorite:true},{id:'ethereum',name:'Ethereum',symbol:'ETH',iconUrl:require('../assets/eth.png'),balance:0,price:2500,change24h:1.2,addresses:['0x742d35Cc6634C0532925a3b844Bc454e4438f44e'],isFavorite:true},{id:'tron',name:'Tron',symbol:'TRX',iconUrl:require('../assets/trx.png'),balance:0,price:0.1,change24h:-0.8,addresses:['TJA1VnRyu97C4JfYMZ2ToQnXrYzMDpP3s9'],isFavorite:true},{id:'binance',name:'Binance',symbol:'BNB',iconUrl:require('../assets/bnb.png'),balance:0,price:400,change24h:0.7,addresses:['bnb1c6aqe8zd3qe5zk5z77j0lkrw5mkzrm4n8jlte3'],isFavorite:true},{id:'solana',name:'Solana',symbol:'SOL',iconUrl:require('../assets/sol.png'),balance:0,price:100,change24h:3.4,addresses:['6uGzhGHXwZYrMZw3zGGqbF6o3FvuPLuTNcSxwdKTKv7D'],isFavorite:true}],transactions:[]};// Başlangıç token listesi - initialWalletState içine eklenecek yeni token'lar\nconst additionalTokens=[];const Dashboard=()=>{const[walletData,setWalletData]=useState(initialWalletState);const[activeNetworkId,setActiveNetworkId]=useState('bitcoin');const[isShowingSend,setIsShowingSend]=useState(false);const[isShowingReceive,setIsShowingReceive]=useState(false);const[isShowingSettings,setIsShowingSettings]=useState(false);const[isGeneratingAddress,setIsGeneratingAddress]=useState(false);const[isRefreshingPrices,setIsRefreshingPrices]=useState(false);const[isLoadingBalances,setIsLoadingBalances]=useState(false);const[searchTerm,setSearchTerm]=useState('');const[activeTab,setActiveTab]=useState('assets');const[error,setError]=useState('');const[isShowingAddToken,setIsShowingAddToken]=useState(false);const[activeNetwork,setActiveNetwork]=useState(null);const[isProcessingTransaction,setIsProcessingTransaction]=useState(false);const[transactionFee,setTransactionFee]=useState(null);// Pencere kontrol işlevleri\nconst handleWindowControl=action=>{if(window.electronAPI){if(action==='minimize')window.electronAPI.minimizeWindow();if(action==='maximize')window.electronAPI.maximizeWindow();if(action==='close')window.electronAPI.closeWindow();}};// Cüzdan başlatma\nuseEffect(()=>{initializeWallet();// Refresh CSS when component mounts\nif(window.electronAPI&&window.electronAPI.refreshCSS){window.electronAPI.refreshCSS();}},[]);// Adres çağrısını ekleyelim\nuseEffect(()=>{fetchAddresses();},[]);// Fiyatları ve bakiyeleri düzenli aralıklarla güncelle\nuseEffect(()=>{fetchPrices();fetchBalances();// 60 saniyede bir yenile\nconst interval=setInterval(()=>{fetchPrices();fetchBalances();},60000);return()=>clearInterval(interval);},[]);// Cüzdan adreslerini getir\nconst fetchAddresses=async()=>{try{if(!window.walletAPI){console.warn(\"walletAPI not found, using simulated addresses\");// Test için örnek adresler\nconst sampleAddresses={bitcoin:'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',ethereum:'0x742d35Cc6634C0532925a3b844Bc454e4438f44e',tron:'TJA1VnRyu97C4JfYMZ2ToQnXrYzMDpP3s9',binance:'bnb1c6aqe8zd3qe5zk5z77j0lkrw5mkzrm4n8jlte3',solana:'6uGzhGHXwZYrMZw3zGGqbF6o3FvuPLuTNcSxwdKTKv7D'};const updatedNetworks=walletData.networks.map(network=>{let address='';if(network.isToken){// Token için ana zincir adresini kullan\nconst parentNetwork=network.network==='ETH'?'ethereum':network.network==='TRX'?'tron':'';address=sampleAddresses[parentNetwork.toLowerCase()];}else{address=sampleAddresses[network.id.toLowerCase()]||'';}return _objectSpread(_objectSpread({},network),{},{addresses:address?[address]:[]});});setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:updatedNetworks}));return;}// Wallet API'den adresleri getir\nconst addresses=await window.walletAPI.getAddresses();const updatedNetworks=walletData.networks.map(network=>{let networkAddresses=[];if(network.isToken){// Token için ana zincir adresini kullan\nconst parentNetwork=network.network==='ETH'?'ethereum':network.network==='TRX'?'tron':'';networkAddresses=addresses[parentNetwork.toLowerCase()]||[];}else{networkAddresses=addresses[network.id.toLowerCase()]||[];}return _objectSpread(_objectSpread({},network),{},{addresses:networkAddresses});});setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:updatedNetworks}));}catch(error){console.error('Address fetch error:',error);// Hata mesajını daha açıklayıcı ve nazik hale getiriyoruz\nsetError('Adresler alınırken bir sorun oluştu. Lütfen daha sonra tekrar deneyin.');// Hata mesajını 5 saniye sonra otomatik olarak kapatma\nsetTimeout(()=>{setError('');},5000);}};// Cüzdan verilerini başlat\nconst initializeWallet=async()=>{try{// Wallet API bağlantısını kontrol et\nif(!window.walletAPI){console.warn(\"walletAPI not found, using simulated data\");return;}// Cüzdan kilit açma durumunu kontrol et (gerçek uygulamada daha kompleks olmalı)\n// İşlem geçmişi gibi kayıtlı verileri yükle\nconsole.log(\"Wallet initialized\");}catch(error){console.error('Wallet initialization error:',error);setError('Cüzdan başlatılırken bir hata oluştu');}};// Kripto para fiyatlarını getir\nconst fetchPrices=async()=>{try{setIsRefreshingPrices(true);// CoinGecko API ile fiyatları al\nconst response=await fetch('https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,tron,binance-coin,solana,tether&vs_currencies=usd&include_24hr_change=true');if(!response.ok){throw new Error('Fiyat verisi alınamadı');}const data=await response.json();const updatedNetworks=walletData.networks.map(network=>{let coinId;// USDT için sabit fiyat\nif(network.id.includes('tether')){var _data$tether;return _objectSpread(_objectSpread({},network),{},{price:1.00,change24h:(_data$tether=data.tether)!==null&&_data$tether!==void 0&&_data$tether.usd_24h_change?parseFloat(data.tether.usd_24h_change.toFixed(2)):0});}// Diğer coinler için API'den gelen fiyatlar\nif(network.id==='bitcoin')coinId='bitcoin';else if(network.id==='ethereum')coinId='ethereum';else if(network.id==='tron')coinId='tron';else if(network.id==='binance')coinId='binance-coin';else if(network.id==='solana')coinId='solana';else coinId=network.id;if(data[coinId]){return _objectSpread(_objectSpread({},network),{},{price:data[coinId].usd,change24h:data[coinId].usd_24h_change?parseFloat(data[coinId].usd_24h_change.toFixed(2)):0});}return network;});setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:updatedNetworks}));}catch(error){console.error('Price fetch error:',error);}finally{setIsRefreshingPrices(false);}};// Wallet API ile bakiyeleri güncelle\nconst fetchBalancesWithWalletAPI=async()=>{try{setIsLoadingBalances(true);// Test modu\nif(!window.walletAPI){console.warn(\"walletAPI not found, using simulated balances\");// Simüle edilmiş bakiyeleri kullan\nreturn;}// Aktif cüzdan ID'sini al\nconst activeWalletId=localStorage.getItem('activeWalletId');if(!activeWalletId){console.error(\"Aktif cüzdan ID'si bulunamadı\");return;}// Her ağ için bakiye sorgula\nconst balancePromises=walletData.networks.map(async network=>{// Adres yoksa bakiye de yoktur\nif(!network.addresses||network.addresses.length===0){return _objectSpread(_objectSpread({},network),{},{balance:0});}const address=network.addresses[0];let balance=0;let response;try{// Token için farklı API çağrısı yap\nif(network.isToken){response=await window.walletAPI.getTokenBalance(activeWalletId,network.network,address,network.tokenAddress);if(response.success){balance=parseFloat(response.balance);}}else{// Normal coin bakiyesi\nresponse=await window.walletAPI.getBalance(activeWalletId,network.id,address);if(response.success){balance=parseFloat(response.balance);}}}catch(error){console.error(\"Balance fetch error for \".concat(network.name,\":\"),error);}return _objectSpread(_objectSpread({},network),{},{balance});});// Tüm bakiye sorgularını tamamla\nconst updatedNetworks=await Promise.all(balancePromises);// Toplam cüzdan değerini hesapla\nconst totalBalance=updatedNetworks.reduce((total,network)=>{return total+network.balance*network.price;},0);setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:updatedNetworks,totalBalance}));}catch(error){console.error('Balance fetch error with Wallet API:',error);}finally{setIsLoadingBalances(false);}};// İşlem geçmişini al\nconst fetchTransactionHistory=async(networkId,address)=>{try{if(!window.walletAPI){console.warn(\"walletAPI not found, using simulated transaction history\");return;}const activeWalletId=localStorage.getItem('activeWalletId');if(!activeWalletId){console.error(\"Aktif cüzdan ID'si bulunamadı\");return;}const response=await window.walletAPI.getTransactionHistory(activeWalletId,networkId,address);if(response.success){setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{transactions:response.transactions}));}}catch(error){console.error('Transaction history fetch error:',error);}};// İşlem gönderme fonksiyonu - Wallet Engine entegrasyonu\nconst sendTransaction=async function(to,amount){let memo=arguments.length>2&&arguments[2]!==undefined?arguments[2]:'';try{if(!activeNetwork.addresses||activeNetwork.addresses.length===0){throw new Error('Gönderim yapmak için önce bir adres oluşturmalısınız.');}setIsProcessingTransaction(true);// Test modu\nif(!window.walletAPI){console.warn(\"walletAPI not found, using simulated transaction\");// İşlemi simüle et\nsetTimeout(()=>{// Yeni işlem oluştur\naddTransaction('send',amount,to);setIsProcessingTransaction(false);setIsShowingSend(false);},2000);return;}const activeWalletId=localStorage.getItem('activeWalletId');if(!activeWalletId){throw new Error(\"Aktif cüzdan ID'si bulunamadı\");}const from=activeNetwork.addresses[0];let createTxResponse;// Token işlemi mi yoksa normal işlem mi?\nif(activeNetwork.isToken){createTxResponse=await window.walletAPI.createTokenTransaction(activeWalletId,activeNetwork.network,from,to,activeNetwork.tokenAddress,amount.toString(),memo);}else{createTxResponse=await window.walletAPI.createTransaction(activeWalletId,activeNetwork.id,from,to,amount.toString(),memo);}if(!createTxResponse.success){throw new Error(createTxResponse.error||'İşlem oluşturulamadı');}// Kullanıcıdan şifre al\nconst password=prompt('Lütfen cüzdan şifrenizi girin:');if(!password){throw new Error('İşlem iptal edildi');}// İşlemi imzala\nconst signResponse=await window.walletAPI.signTransaction(activeWalletId,activeNetwork.isToken?activeNetwork.network:activeNetwork.id,createTxResponse.tx.hex,password);if(!signResponse.success){throw new Error(signResponse.error||'İşlem imzalanamadı');}// İmzalanmış işlemi yayınla\nconst broadcastResponse=await window.walletAPI.broadcastTransaction(activeNetwork.isToken?activeNetwork.network:activeNetwork.id,signResponse.signed_tx);if(!broadcastResponse.success){throw new Error(broadcastResponse.error||'İşlem yayınlanamadı');}// İşlem başarılı\nconst newTx={id:broadcastResponse.tx_hash,date:new Date().toLocaleDateString('tr-TR'),time:new Date().toLocaleTimeString('tr-TR'),type:'send',amount:amount,currency:activeNetwork.symbol,status:'completed',to,fee:createTxResponse.tx.fee};// İşlemi transactions listesine ekle\nsetWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{transactions:[newTx,...prev.transactions]}));// Bakiyeleri güncelle\nsetTimeout(()=>{fetchBalancesWithWalletAPI();},5000);// 5 saniye sonra bakiyeleri güncelle (blockchain onayları için bekliyoruz)\n// Modali kapat\nsetIsShowingSend(false);}catch(error){console.error('Transaction error:',error);alert(\"\\u0130\\u015Flem hatas\\u0131: \".concat(error.message));}finally{setIsProcessingTransaction(false);}};// Adres oluşturma\nconst generateAddress=()=>{setIsGeneratingAddress(true);// Adres oluşturma simüle et (gerçek implementasyonda wallet-engine kullanılacak)\nsetTimeout(()=>{const dummyAddresses={bitcoin:'1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',ethereum:'0x742d35Cc6634C0532925a3b844Bc454e4438f44e',tron:'TJA1VnRyu97C4JfYMZ2ToQnXrYzMDpP3s9',binance:'bnb1c6aqe8zd3qe5zk5z77j0lkrw5mkzrm4n8jlte3',solana:'6uGzhGHXwZYrMZw3zGGqbF6o3FvuPLuTNcSxwdKTKv7D',tether_trc20:'TJA1VnRyu97C4JfYMZ2ToQnXrYzMDpP3s9',tether_erc20:'0x742d35Cc6634C0532925a3b844Bc454e4438f44e'};const updatedNetworks=walletData.networks.map(network=>{return _objectSpread(_objectSpread({},network),{},{addresses:network.id===activeNetworkId?[dummyAddresses[network.id]||dummyAddresses.bitcoin]:network.addresses});});setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:updatedNetworks}));setIsGeneratingAddress(false);},2000);};// İşlem ekleme\nconst addTransaction=function(type,amount){let to=arguments.length>2&&arguments[2]!==undefined?arguments[2]:null;const newTx={id:\"tx-\".concat(Date.now()),date:new Date().toLocaleDateString('tr-TR'),time:new Date().toLocaleTimeString('tr-TR'),type,amount,currency:activeNetwork.symbol,status:'pending',to};// Önce işlemi ekle\nsetWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{transactions:[newTx,...prev.transactions]}));// 3 saniye sonra işlemi tamamlanmış olarak güncelle\nsetTimeout(()=>{setWalletData(prev=>{// İşlemi güncelle\nconst updatedTransactions=prev.transactions.map(tx=>tx.id===newTx.id?_objectSpread(_objectSpread({},tx),{},{status:'completed'}):tx);// Gönderim ise bakiyeyi azalt, değilse artır\nconst updatedNetworks=prev.networks.map(network=>{if(network.id===activeNetworkId){const balanceChange=type==='send'?-amount:amount;return _objectSpread(_objectSpread({},network),{},{balance:parseFloat((network.balance+balanceChange).toFixed(8))});}return network;});// Toplam cüzdan değerini güncelle\nconst totalBalance=updatedNetworks.reduce((total,network)=>{return total+network.balance*network.price;},0);return{networks:updatedNetworks,transactions:updatedTransactions,totalBalance};});},3000);};// İşlem gönderme handler'ı\nconst handleSend=(to,amount)=>{if(!activeNetwork.addresses.length){alert('Gönderim yapmak için önce bir adres oluşturmalısınız.');return;}sendTransaction(to,amount);};// Para alma simülasyonu\nconst handleReceiveTest=()=>{if(!activeNetwork.addresses.length){alert('Para almak için önce bir adres oluşturmalısınız.');return;}const testAmount=parseFloat((Math.random()*0.1).toFixed(8));addTransaction('receive',testAmount);setIsShowingReceive(false);};// Arama işlevini yönet\nconst handleSearch=e=>{setSearchTerm(e.target.value);};// Arama sonuçlarını filtrele\nconst filteredAssets=walletData.networks.filter(network=>network.name.toLowerCase().includes(searchTerm.toLowerCase())||network.symbol.toLowerCase().includes(searchTerm.toLowerCase()));// Favori değiştirme\nconst toggleFavorite=id=>{setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:prev.networks.map(network=>network.id===id?_objectSpread(_objectSpread({},network),{},{isFavorite:!network.isFavorite}):network)}));};// Token ekleme işlevi\nconst handleAddToken=tokenInfo=>{if(tokenInfo.success&&tokenInfo.token){var _walletData$networks$;const newToken={id:tokenInfo.token.id,name:tokenInfo.token.name,symbol:tokenInfo.token.symbol,iconUrl:require('../assets/btc.png'),// Varsayılan token ikonu\nnetworkIcon:getNetworkIcon(tokenInfo.token.network),network:tokenInfo.token.network,balance:tokenInfo.token.balance||0,price:tokenInfo.token.price||0,change24h:tokenInfo.token.change24h||0,addresses:((_walletData$networks$=walletData.networks.find(n=>n.id===tokenInfo.token.network))===null||_walletData$networks$===void 0?void 0:_walletData$networks$.addresses)||[],isFavorite:false,isToken:true,tokenAddress:tokenInfo.token.tokenAddress,decimals:tokenInfo.token.decimals||18};setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:[...prev.networks,newToken]}));}};// Network ikonu alma yardımcı fonksiyonu\nconst getNetworkIcon=networkId=>{const iconMap={'ETH':require('../assets/eth.png'),'TRX':require('../assets/trx.png'),'BSC':require('../assets/bnb.png'),'SOL':require('../assets/sol.png')};// unknown-network.png yerine varsayılan olarak eth.png kullan\nreturn iconMap[networkId]||require('../assets/btc.png');};// Yeni token ekleme/hesap ekranını göster\nconst handleAddNewAccount=networkId=>{// networkId burada \"ethereum\", \"tron\", \"binance\" gibi ana blockchain ID'si olacak\nsetActiveNetwork(networkId);setIsShowingAddToken(true);};// Token otomatik tespit etme\nconst autoDetectTokens=async(networkCode,address)=>{try{setIsLoadingBalances(true);// Test modu\nif(!window.walletAPI){console.warn(\"walletAPI not found, using simulated token detection\");// 2 saniye simüle\nsetTimeout(()=>{// Örnek token listesi\nconst sampleTokens=[{id:\"sample_token1_\".concat(networkCode.toLowerCase()),name:\"Sample Token 1\",symbol:\"ST1\",network:networkCode,tokenAddress:\"0x1234567890abcdef1234567890abcdef12345678\",decimals:18,balance:125.45},{id:\"sample_token2_\".concat(networkCode.toLowerCase()),name:\"Sample Token 2\",symbol:\"ST2\",network:networkCode,tokenAddress:\"0xabcdef1234567890abcdef1234567890abcdef12\",decimals:8,balance:50.75}];// Yeni tokenları ekle\nconst updatedNetworks=[...walletData.networks];sampleTokens.forEach(token=>{// Token zaten eklenmişse atlayın\nif(!updatedNetworks.find(n=>n.tokenAddress===token.tokenAddress)){updatedNetworks.push({id:token.id,name:token.name,symbol:token.symbol,iconUrl:require('../assets/btc.png'),networkIcon:getNetworkIcon(token.network),network:token.network,balance:token.balance,price:1.0,// Örnek fiyat\nchange24h:0,addresses:[address],isFavorite:false,isToken:true,tokenAddress:token.tokenAddress,decimals:token.decimals});}});setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:updatedNetworks}));setIsLoadingBalances(false);},2000);return;}// Gerçek token algılama\nconst networkAddress=getNetworkAddress(networkCode);if(!networkAddress){throw new Error(\"\".concat(networkCode,\" a\\u011F\\u0131 i\\xE7in adres bulunamad\\u0131\"));}const response=await BlockchainAPI.Tokens.autoDetectTokens(networkCode,networkAddress);if(response.success&&response.tokens){// Yeni tokenları ekle\nconst updatedNetworks=[...walletData.networks];response.tokens.forEach(token=>{// Token zaten eklenmişse atlayın\nif(!updatedNetworks.find(n=>n.tokenAddress===token.tokenAddress)){updatedNetworks.push({id:\"\".concat(token.symbol.toLowerCase(),\"_\").concat(networkCode.toLowerCase()),name:token.name,symbol:token.symbol,iconUrl:require('../assets/btc.png'),networkIcon:getNetworkIcon(networkCode),network:networkCode,balance:token.balance||0,price:1.0,// Varsayılan fiyat, gerçek fiyat daha sonra güncellenecek\nchange24h:0,addresses:[networkAddress],isFavorite:false,isToken:true,tokenAddress:token.tokenAddress,decimals:token.decimals});}});setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:updatedNetworks}));}}catch(error){console.error('Token detection error:',error);setError(\"Token'lar alg\\u0131lan\\u0131rken bir hata olu\\u015Ftu: \".concat(error.message));}finally{setIsLoadingBalances(false);}};// Ağ adresini alma yardımcı fonksiyonu\nconst getNetworkAddress=networkCode=>{// networkCode: 'ETH', 'TRX', 'BSC', 'SOL' gibi\nconst networkMapping={'ETH':'ethereum','TRX':'tron','BSC':'binance','SOL':'solana'};const networkId=networkMapping[networkCode];if(!networkId)return null;const network=walletData.networks.find(n=>n.id===networkId);return(network===null||network===void 0?void 0:network.addresses[0])||null;};// useEffect içinde aktif wallet ID'sini localStorage'dan alalım\nuseEffect(()=>{const activeWalletId=localStorage.getItem('activeWalletId');if(activeWalletId){console.log('Active wallet ID:',activeWalletId);}else{console.warn('No active wallet ID found');}},[]);// activeNetwork'ü güncelle\nuseEffect(()=>{const currentNetwork=walletData.networks.find(n=>n.id===activeNetworkId)||walletData.networks[0];setActiveNetwork(currentNetwork);},[activeNetworkId,walletData.networks]);// fetchBalances fonksiyonunu ekleyin (fetchBalancesWithWalletAPI üzerinden çağıracak)\nconst fetchBalances=()=>{try{// Test modunda simüle edilmiş bakiyeler\nif(!window.walletAPI){console.warn(\"walletAPI not found, using simulated balances\");const simulatedNetworks=walletData.networks.map(network=>{return _objectSpread(_objectSpread({},network),{},{balance:Math.random()*(network.id==='bitcoin'?0.1:network.id==='ethereum'?1:10)});});setWalletData(prev=>_objectSpread(_objectSpread({},prev),{},{networks:simulatedNetworks,totalBalance:simulatedNetworks.reduce((total,network)=>total+network.balance*network.price,0)}));setIsLoadingBalances(false);return;}// Gerçek API çağrısı\nfetchBalancesWithWalletAPI();}catch(error){console.error('Error in fetchBalances:',error);setIsLoadingBalances(false);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-container\",children:[/*#__PURE__*/_jsx(TitleBar,{title:\"Exchange Global - Cold Wallet\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"dashboard-content\",children:[/*#__PURE__*/_jsx(SideMenu,{networks:walletData.networks||[],activeNetworkId:activeNetworkId,totalBalance:walletData.totalBalance||0,onNetworkSelect:setActiveNetworkId,onAddNewAccount:handleAddNewAccount}),/*#__PURE__*/_jsxs(\"div\",{className:\"main-content\",children:[/*#__PURE__*/_jsx(WalletHeader,{searchTerm:searchTerm,onSearch:handleSearch,activeTab:activeTab,onTabChange:setActiveTab}),/*#__PURE__*/_jsxs(\"div\",{className:\"assets-container\",children:[/*#__PURE__*/_jsx(AssetList,{networks:walletData.networks||[],onSelectAsset:setActiveNetworkId,selectedAssetId:activeNetworkId,searchTerm:searchTerm,onToggleFavorite:toggleFavorite,activeTab:activeTab}),activeNetwork&&/*#__PURE__*/_jsx(AssetDetail,{asset:activeNetwork,onSend:()=>setIsShowingSend(true),onReceive:()=>setIsShowingReceive(true),onGenerateAddress:generateAddress,isGeneratingAddress:isGeneratingAddress,transactions:walletData.transactions.filter(tx=>tx.network===activeNetwork.id).sort((a,b)=>new Date(b.timestamp)-new Date(a.timestamp))})]})]})]}),isShowingSend&&activeNetwork&&/*#__PURE__*/_jsx(SendModal,{onClose:()=>setIsShowingSend(false),asset:activeNetwork,onSend:handleSend,fee:transactionFee,processing:isProcessingTransaction}),isShowingReceive&&activeNetwork&&/*#__PURE__*/_jsx(ReceiveModal,{onClose:()=>setIsShowingReceive(false),asset:activeNetwork,onTest:handleReceiveTest}),isShowingSettings&&/*#__PURE__*/_jsx(SettingsModal,{onClose:()=>setIsShowingSettings(false)}),isShowingAddToken&&/*#__PURE__*/_jsx(TokenAddModal,{onClose:()=>setIsShowingAddToken(false),onAdd:handleAddToken,supportedNetworks:['ETH','TRX','BSC'],tokenDefinitions:TOKEN_DEFINITIONS,onAutoDetect:autoDetectTokens,getNetworkAddress:getNetworkAddress}),error&&/*#__PURE__*/_jsxs(\"div\",{className:\"error-notification\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"error-message\",children:error}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setError(''),children:\"Kapat\"})]})]});};export default Dashboard;","map":{"version":3,"names":["React","useState","useEffect","AssetList","AssetDetail","WalletHeader","SideMenu","SendModal","ReceiveModal","SettingsModal","BlockchainAPI","TokenAddModal","TitleBar","jsx","_jsx","jsxs","_jsxs","TOKEN_DEFINITIONS","id","name","symbol","network","tokenAddress","decimals","initialWalletState","totalBalance","networks","iconUrl","require","balance","price","change24h","addresses","isFavorite","transactions","additionalTokens","Dashboard","walletData","setWalletData","activeNetworkId","setActiveNetworkId","isShowingSend","setIsShowingSend","isShowingReceive","setIsShowingReceive","isShowingSettings","setIsShowingSettings","isGeneratingAddress","setIsGeneratingAddress","isRefreshingPrices","setIsRefreshingPrices","isLoadingBalances","setIsLoadingBalances","searchTerm","setSearchTerm","activeTab","setActiveTab","error","setError","isShowingAddToken","setIsShowingAddToken","activeNetwork","setActiveNetwork","isProcessingTransaction","setIsProcessingTransaction","transactionFee","setTransactionFee","handleWindowControl","action","window","electronAPI","minimizeWindow","maximizeWindow","closeWindow","initializeWallet","refreshCSS","fetchAddresses","fetchPrices","fetchBalances","interval","setInterval","clearInterval","walletAPI","console","warn","sampleAddresses","bitcoin","ethereum","tron","binance","solana","updatedNetworks","map","address","isToken","parentNetwork","toLowerCase","_objectSpread","prev","getAddresses","networkAddresses","setTimeout","log","response","fetch","ok","Error","data","json","coinId","includes","_data$tether","tether","usd_24h_change","parseFloat","toFixed","usd","fetchBalancesWithWalletAPI","activeWalletId","localStorage","getItem","balancePromises","length","getTokenBalance","success","getBalance","concat","Promise","all","reduce","total","fetchTransactionHistory","networkId","getTransactionHistory","sendTransaction","to","amount","memo","arguments","undefined","addTransaction","from","createTxResponse","createTokenTransaction","toString","createTransaction","password","prompt","signResponse","signTransaction","tx","hex","broadcastResponse","broadcastTransaction","signed_tx","newTx","tx_hash","date","Date","toLocaleDateString","time","toLocaleTimeString","type","currency","status","fee","alert","message","generateAddress","dummyAddresses","tether_trc20","tether_erc20","now","updatedTransactions","balanceChange","handleSend","handleReceiveTest","testAmount","Math","random","handleSearch","e","target","value","filteredAssets","filter","toggleFavorite","handleAddToken","tokenInfo","token","_walletData$networks$","newToken","networkIcon","getNetworkIcon","find","n","iconMap","handleAddNewAccount","autoDetectTokens","networkCode","sampleTokens","forEach","push","networkAddress","getNetworkAddress","Tokens","tokens","networkMapping","currentNetwork","simulatedNetworks","className","children","title","onNetworkSelect","onAddNewAccount","onSearch","onTabChange","onSelectAsset","selectedAssetId","onToggleFavorite","asset","onSend","onReceive","onGenerateAddress","sort","a","b","timestamp","onClose","processing","onTest","onAdd","supportedNetworks","tokenDefinitions","onAutoDetect","onClick"],"sources":["C:/Cold_Wallet/wallet-app/src/components/Dashboard.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport '../styles/Dashboard.css';\r\nimport AssetList from './Dashboard/AssetList';\r\nimport AssetDetail from './Dashboard/AssetDetail';\r\nimport WalletHeader from './Dashboard/WalletHeader';\r\nimport SideMenu from './Dashboard/SideMenu';\r\nimport SendModal from './SendModal';\r\nimport ReceiveModal from './ReceiveModal';\r\nimport SettingsModal from './SettingsModal';\r\nimport BlockchainAPI from '../services/BlockchainAPI';\r\nimport TokenAddModal from '../components/TokenAddModal';\r\nimport TitleBar from './TitleBar';\r\n\r\n// Token tanımları\r\nconst TOKEN_DEFINITIONS = {\r\n  'USDT-TRC20': {\r\n    id: 'tether_trc20',\r\n    name: 'Tether USD',\r\n    symbol: 'USDT',\r\n    network: 'TRX',\r\n    tokenAddress: 'TR7NHqjeKQxGTCi8q8ZY4pL8otSzgjLj6t', // USDT-TRC20 kontrat adresi\r\n    decimals: 6\r\n  },\r\n  'USDT-ERC20': {\r\n    id: 'tether_erc20',\r\n    name: 'Tether USD',\r\n    symbol: 'USDT',\r\n    network: 'ETH',\r\n    tokenAddress: '0xdAC17F958D2ee523a2206206994597C13D831ec7', // USDT-ERC20 kontrat adresi\r\n    decimals: 6\r\n  },\r\n  'USDC-ERC20': {\r\n    id: 'usdc_erc20',\r\n    name: 'USD Coin',\r\n    symbol: 'USDC',\r\n    network: 'ETH',\r\n    tokenAddress: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48',\r\n    decimals: 6\r\n  },\r\n  'DAI-ERC20': {\r\n    id: 'dai_erc20',\r\n    name: 'Dai Stablecoin',\r\n    symbol: 'DAI',\r\n    network: 'ETH',\r\n    tokenAddress: '0x6B175474E89094C44Da98b954EedeAC495271d0F',\r\n    decimals: 18\r\n  },\r\n  'LINK-ERC20': {\r\n    id: 'link_erc20',\r\n    name: 'Chainlink',\r\n    symbol: 'LINK',\r\n    network: 'ETH',\r\n    tokenAddress: '0x514910771AF9Ca656af840dff83E8264EcF986CA',\r\n    decimals: 18\r\n  },\r\n  'UNI-ERC20': {\r\n    id: 'uni_erc20',\r\n    name: 'Uniswap',\r\n    symbol: 'UNI',\r\n    network: 'ETH',\r\n    tokenAddress: '0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984',\r\n    decimals: 18\r\n  },\r\n  'BTT-TRC20': {\r\n    id: 'btt_trc20',\r\n    name: 'BitTorrent',\r\n    symbol: 'BTT',\r\n    network: 'TRX',\r\n    tokenAddress: 'TAFjULxiVgT4qWk6UZwjqwZXTSaGaqnVp4',\r\n    decimals: 18\r\n  },\r\n  'WIN-TRC20': {\r\n    id: 'win_trc20',\r\n    name: 'WINkLink',\r\n    symbol: 'WIN',\r\n    network: 'TRX',\r\n    tokenAddress: 'TLa2f6VPqDgRE67v1736s7bJ8Ray5wYjU7',\r\n    decimals: 6\r\n  },\r\n  'USDT-BEP20': {\r\n    id: 'tether_bep20',\r\n    name: 'Tether USD',\r\n    symbol: 'USDT',\r\n    network: 'BSC',\r\n    tokenAddress: '0x55d398326f99059fF775485246999027B3197955',\r\n    decimals: 18\r\n  },\r\n  'BUSD-BEP20': {\r\n    id: 'busd_bep20',\r\n    name: 'Binance USD',\r\n    symbol: 'BUSD',\r\n    network: 'BSC',\r\n    tokenAddress: '0xe9e7CEA3DedcA5984780Bafc599bD69ADd087D56',\r\n    decimals: 18\r\n  },\r\n  'CAKE-BEP20': {\r\n    id: 'cake_bep20',\r\n    name: 'PancakeSwap',\r\n    symbol: 'CAKE',\r\n    network: 'BSC',\r\n    tokenAddress: '0x0E09FaBB73Bd3Ade0a17ECC321fD13a19e81cE82',\r\n    decimals: 18\r\n  }\r\n};\r\n\r\n// Başlangıç cüzdan durumu\r\nconst initialWalletState = {\r\n  totalBalance: 0,\r\n  networks: [\r\n    {\r\n      id: 'bitcoin',\r\n      name: 'Bitcoin',\r\n      symbol: 'BTC',\r\n      iconUrl: require('../assets/btc.png'),\r\n      balance: 0,\r\n      price: 40000,\r\n      change24h: 2.5,\r\n      addresses: ['1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa'],\r\n      isFavorite: true\r\n    },\r\n    {\r\n      id: 'ethereum',\r\n      name: 'Ethereum',\r\n      symbol: 'ETH',\r\n      iconUrl: require('../assets/eth.png'),\r\n      balance: 0,\r\n      price: 2500,\r\n      change24h: 1.2,\r\n      addresses: ['0x742d35Cc6634C0532925a3b844Bc454e4438f44e'],\r\n      isFavorite: true\r\n    },\r\n    {\r\n      id: 'tron',\r\n      name: 'Tron',\r\n      symbol: 'TRX',\r\n      iconUrl: require('../assets/trx.png'),\r\n      balance: 0,\r\n      price: 0.1,\r\n      change24h: -0.8,\r\n      addresses: ['TJA1VnRyu97C4JfYMZ2ToQnXrYzMDpP3s9'],\r\n      isFavorite: true\r\n    },\r\n    {\r\n      id: 'binance',\r\n      name: 'Binance',\r\n      symbol: 'BNB',\r\n      iconUrl: require('../assets/bnb.png'),\r\n      balance: 0,\r\n      price: 400,\r\n      change24h: 0.7,\r\n      addresses: ['bnb1c6aqe8zd3qe5zk5z77j0lkrw5mkzrm4n8jlte3'],\r\n      isFavorite: true\r\n    },\r\n    {\r\n      id: 'solana',\r\n      name: 'Solana',\r\n      symbol: 'SOL',\r\n      iconUrl: require('../assets/sol.png'),\r\n      balance: 0,\r\n      price: 100,\r\n      change24h: 3.4,\r\n      addresses: ['6uGzhGHXwZYrMZw3zGGqbF6o3FvuPLuTNcSxwdKTKv7D'],\r\n      isFavorite: true\r\n    }\r\n  ],\r\n  transactions: []\r\n};\r\n\r\n// Başlangıç token listesi - initialWalletState içine eklenecek yeni token'lar\r\nconst additionalTokens = [];\r\n\r\nconst Dashboard = () => {\r\n  const [walletData, setWalletData] = useState(initialWalletState);\r\n  const [activeNetworkId, setActiveNetworkId] = useState('bitcoin');\r\n  const [isShowingSend, setIsShowingSend] = useState(false);\r\n  const [isShowingReceive, setIsShowingReceive] = useState(false);\r\n  const [isShowingSettings, setIsShowingSettings] = useState(false);\r\n  const [isGeneratingAddress, setIsGeneratingAddress] = useState(false);\r\n  const [isRefreshingPrices, setIsRefreshingPrices] = useState(false);\r\n  const [isLoadingBalances, setIsLoadingBalances] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [activeTab, setActiveTab] = useState('assets');\r\n  const [error, setError] = useState('');\r\n  const [isShowingAddToken, setIsShowingAddToken] = useState(false);\r\n  const [activeNetwork, setActiveNetwork] = useState(null);\r\n  const [isProcessingTransaction, setIsProcessingTransaction] = useState(false);\r\n  const [transactionFee, setTransactionFee] = useState(null);\r\n\r\n  // Pencere kontrol işlevleri\r\n  const handleWindowControl = (action) => {\r\n    if (window.electronAPI) {\r\n      if (action === 'minimize') window.electronAPI.minimizeWindow();\r\n      if (action === 'maximize') window.electronAPI.maximizeWindow();\r\n      if (action === 'close') window.electronAPI.closeWindow();\r\n    }\r\n  };\r\n\r\n  // Cüzdan başlatma\r\n  useEffect(() => {\r\n    initializeWallet();\r\n    \r\n    // Refresh CSS when component mounts\r\n    if (window.electronAPI && window.electronAPI.refreshCSS) {\r\n      window.electronAPI.refreshCSS();\r\n    }\r\n  }, []);\r\n  \r\n  // Adres çağrısını ekleyelim\r\n  useEffect(() => {\r\n    fetchAddresses();\r\n  }, []);\r\n\r\n  // Fiyatları ve bakiyeleri düzenli aralıklarla güncelle\r\n  useEffect(() => {\r\n    fetchPrices();\r\n    fetchBalances();\r\n    \r\n    // 60 saniyede bir yenile\r\n    const interval = setInterval(() => {\r\n      fetchPrices();\r\n      fetchBalances();\r\n    }, 60000);\r\n    \r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Cüzdan adreslerini getir\r\n  const fetchAddresses = async () => {\r\n    try {\r\n      if (!window.walletAPI) {\r\n        console.warn(\"walletAPI not found, using simulated addresses\");\r\n        // Test için örnek adresler\r\n        const sampleAddresses = {\r\n          bitcoin: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\r\n          ethereum: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e',\r\n          tron: 'TJA1VnRyu97C4JfYMZ2ToQnXrYzMDpP3s9',\r\n          binance: 'bnb1c6aqe8zd3qe5zk5z77j0lkrw5mkzrm4n8jlte3',\r\n          solana: '6uGzhGHXwZYrMZw3zGGqbF6o3FvuPLuTNcSxwdKTKv7D'\r\n        };\r\n        \r\n        const updatedNetworks = walletData.networks.map(network => {\r\n          let address = '';\r\n          if (network.isToken) {\r\n            // Token için ana zincir adresini kullan\r\n            const parentNetwork = network.network === 'ETH' ? 'ethereum' : network.network === 'TRX' ? 'tron' : '';\r\n            address = sampleAddresses[parentNetwork.toLowerCase()];\r\n          } else {\r\n            address = sampleAddresses[network.id.toLowerCase()] || '';\r\n          }\r\n          \r\n          return {\r\n            ...network,\r\n            addresses: address ? [address] : []\r\n          };\r\n        });\r\n        \r\n        setWalletData(prev => ({\r\n          ...prev,\r\n          networks: updatedNetworks\r\n        }));\r\n        \r\n        return;\r\n      }\r\n      \r\n      // Wallet API'den adresleri getir\r\n      const addresses = await window.walletAPI.getAddresses();\r\n      \r\n      const updatedNetworks = walletData.networks.map(network => {\r\n        let networkAddresses = [];\r\n        \r\n        if (network.isToken) {\r\n          // Token için ana zincir adresini kullan\r\n          const parentNetwork = network.network === 'ETH' ? 'ethereum' : \r\n                               network.network === 'TRX' ? 'tron' : '';\r\n          networkAddresses = addresses[parentNetwork.toLowerCase()] || [];\r\n        } else {\r\n          networkAddresses = addresses[network.id.toLowerCase()] || [];\r\n        }\r\n        \r\n        return {\r\n          ...network,\r\n          addresses: networkAddresses\r\n        };\r\n      });\r\n      \r\n      setWalletData(prev => ({\r\n        ...prev,\r\n        networks: updatedNetworks\r\n      }));\r\n    } catch (error) {\r\n      console.error('Address fetch error:', error);\r\n      // Hata mesajını daha açıklayıcı ve nazik hale getiriyoruz\r\n      setError('Adresler alınırken bir sorun oluştu. Lütfen daha sonra tekrar deneyin.');\r\n      \r\n      // Hata mesajını 5 saniye sonra otomatik olarak kapatma\r\n      setTimeout(() => {\r\n        setError('');\r\n      }, 5000);\r\n    }\r\n  };\r\n\r\n  // Cüzdan verilerini başlat\r\n  const initializeWallet = async () => {\r\n    try {\r\n      // Wallet API bağlantısını kontrol et\r\n      if (!window.walletAPI) {\r\n        console.warn(\"walletAPI not found, using simulated data\");\r\n        return;\r\n      }\r\n      \r\n      // Cüzdan kilit açma durumunu kontrol et (gerçek uygulamada daha kompleks olmalı)\r\n      // İşlem geçmişi gibi kayıtlı verileri yükle\r\n      console.log(\"Wallet initialized\");\r\n    } catch (error) {\r\n      console.error('Wallet initialization error:', error);\r\n      setError('Cüzdan başlatılırken bir hata oluştu');\r\n    }\r\n  };\r\n\r\n  // Kripto para fiyatlarını getir\r\n  const fetchPrices = async () => {\r\n    try {\r\n      setIsRefreshingPrices(true);\r\n      \r\n      // CoinGecko API ile fiyatları al\r\n      const response = await fetch(\r\n        'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,tron,binance-coin,solana,tether&vs_currencies=usd&include_24hr_change=true'\r\n      );\r\n      \r\n      if (!response.ok) {\r\n        throw new Error('Fiyat verisi alınamadı');\r\n      }\r\n      \r\n      const data = await response.json();\r\n      \r\n      const updatedNetworks = walletData.networks.map(network => {\r\n        let coinId;\r\n        \r\n        // USDT için sabit fiyat\r\n        if (network.id.includes('tether')) {\r\n          return {\r\n            ...network,\r\n            price: 1.00,\r\n            change24h: data.tether?.usd_24h_change ? parseFloat(data.tether.usd_24h_change.toFixed(2)) : 0\r\n          };\r\n        }\r\n        \r\n        // Diğer coinler için API'den gelen fiyatlar\r\n        if (network.id === 'bitcoin') coinId = 'bitcoin';\r\n        else if (network.id === 'ethereum') coinId = 'ethereum';\r\n        else if (network.id === 'tron') coinId = 'tron';\r\n        else if (network.id === 'binance') coinId = 'binance-coin';\r\n        else if (network.id === 'solana') coinId = 'solana';\r\n        else coinId = network.id;\r\n        \r\n        if (data[coinId]) {\r\n          return {\r\n            ...network,\r\n            price: data[coinId].usd,\r\n            change24h: data[coinId].usd_24h_change ? parseFloat(data[coinId].usd_24h_change.toFixed(2)) : 0\r\n          };\r\n        }\r\n        \r\n        return network;\r\n      });\r\n      \r\n      setWalletData(prev => ({\r\n        ...prev,\r\n        networks: updatedNetworks\r\n      }));\r\n    } catch (error) {\r\n      console.error('Price fetch error:', error);\r\n    } finally {\r\n      setIsRefreshingPrices(false);\r\n    }\r\n  };\r\n\r\n  // Wallet API ile bakiyeleri güncelle\r\n  const fetchBalancesWithWalletAPI = async () => {\r\n    try {\r\n      setIsLoadingBalances(true);\r\n      \r\n      // Test modu\r\n      if (!window.walletAPI) {\r\n        console.warn(\"walletAPI not found, using simulated balances\");\r\n        // Simüle edilmiş bakiyeleri kullan\r\n        return;\r\n      }\r\n      \r\n      // Aktif cüzdan ID'sini al\r\n      const activeWalletId = localStorage.getItem('activeWalletId');\r\n      if (!activeWalletId) {\r\n        console.error(\"Aktif cüzdan ID'si bulunamadı\");\r\n        return;\r\n      }\r\n      \r\n      // Her ağ için bakiye sorgula\r\n      const balancePromises = walletData.networks.map(async (network) => {\r\n        // Adres yoksa bakiye de yoktur\r\n        if (!network.addresses || network.addresses.length === 0) {\r\n          return { ...network, balance: 0 };\r\n        }\r\n        \r\n        const address = network.addresses[0];\r\n        let balance = 0;\r\n        let response;\r\n        \r\n        try {\r\n          // Token için farklı API çağrısı yap\r\n          if (network.isToken) {\r\n            response = await window.walletAPI.getTokenBalance(\r\n              activeWalletId, \r\n              network.network, \r\n              address, \r\n              network.tokenAddress\r\n            );\r\n            \r\n            if (response.success) {\r\n              balance = parseFloat(response.balance);\r\n            }\r\n          } else {\r\n            // Normal coin bakiyesi\r\n            response = await window.walletAPI.getBalance(activeWalletId, network.id, address);\r\n            \r\n            if (response.success) {\r\n              balance = parseFloat(response.balance);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          console.error(`Balance fetch error for ${network.name}:`, error);\r\n        }\r\n        \r\n        return { ...network, balance };\r\n      });\r\n      \r\n      // Tüm bakiye sorgularını tamamla\r\n      const updatedNetworks = await Promise.all(balancePromises);\r\n      \r\n      // Toplam cüzdan değerini hesapla\r\n      const totalBalance = updatedNetworks.reduce((total, network) => {\r\n        return total + (network.balance * network.price);\r\n      }, 0);\r\n      \r\n      setWalletData(prev => ({\r\n        ...prev,\r\n        networks: updatedNetworks,\r\n        totalBalance\r\n      }));\r\n    } catch (error) {\r\n      console.error('Balance fetch error with Wallet API:', error);\r\n    } finally {\r\n      setIsLoadingBalances(false);\r\n    }\r\n  };\r\n\r\n  // İşlem geçmişini al\r\n  const fetchTransactionHistory = async (networkId, address) => {\r\n    try {\r\n      if (!window.walletAPI) {\r\n        console.warn(\"walletAPI not found, using simulated transaction history\");\r\n        return;\r\n      }\r\n      \r\n      const activeWalletId = localStorage.getItem('activeWalletId');\r\n      if (!activeWalletId) {\r\n        console.error(\"Aktif cüzdan ID'si bulunamadı\");\r\n        return;\r\n      }\r\n      \r\n      const response = await window.walletAPI.getTransactionHistory(activeWalletId, networkId, address);\r\n      \r\n      if (response.success) {\r\n        setWalletData(prev => ({\r\n          ...prev,\r\n          transactions: response.transactions\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Transaction history fetch error:', error);\r\n    }\r\n  };\r\n\r\n  // İşlem gönderme fonksiyonu - Wallet Engine entegrasyonu\r\n  const sendTransaction = async (to, amount, memo = '') => {\r\n    try {\r\n      if (!activeNetwork.addresses || activeNetwork.addresses.length === 0) {\r\n        throw new Error('Gönderim yapmak için önce bir adres oluşturmalısınız.');\r\n      }\r\n      \r\n      setIsProcessingTransaction(true);\r\n      \r\n      // Test modu\r\n      if (!window.walletAPI) {\r\n        console.warn(\"walletAPI not found, using simulated transaction\");\r\n        // İşlemi simüle et\r\n        setTimeout(() => {\r\n          // Yeni işlem oluştur\r\n          addTransaction('send', amount, to);\r\n          setIsProcessingTransaction(false);\r\n          setIsShowingSend(false);\r\n        }, 2000);\r\n        return;\r\n      }\r\n      \r\n      const activeWalletId = localStorage.getItem('activeWalletId');\r\n      if (!activeWalletId) {\r\n        throw new Error(\"Aktif cüzdan ID'si bulunamadı\");\r\n      }\r\n      \r\n      const from = activeNetwork.addresses[0];\r\n      let createTxResponse;\r\n      \r\n      // Token işlemi mi yoksa normal işlem mi?\r\n      if (activeNetwork.isToken) {\r\n        createTxResponse = await window.walletAPI.createTokenTransaction(\r\n          activeWalletId,\r\n          activeNetwork.network,\r\n          from,\r\n          to,\r\n          activeNetwork.tokenAddress,\r\n          amount.toString(),\r\n          memo\r\n        );\r\n      } else {\r\n        createTxResponse = await window.walletAPI.createTransaction(\r\n          activeWalletId,\r\n          activeNetwork.id,\r\n          from,\r\n          to,\r\n          amount.toString(),\r\n          memo\r\n        );\r\n      }\r\n      \r\n      if (!createTxResponse.success) {\r\n        throw new Error(createTxResponse.error || 'İşlem oluşturulamadı');\r\n      }\r\n      \r\n      // Kullanıcıdan şifre al\r\n      const password = prompt('Lütfen cüzdan şifrenizi girin:');\r\n      if (!password) {\r\n        throw new Error('İşlem iptal edildi');\r\n      }\r\n\r\n      // İşlemi imzala\r\n      const signResponse = await window.walletAPI.signTransaction(\r\n        activeWalletId,\r\n        activeNetwork.isToken ? activeNetwork.network : activeNetwork.id,\r\n        createTxResponse.tx.hex,\r\n        password\r\n      );\r\n      \r\n      if (!signResponse.success) {\r\n        throw new Error(signResponse.error || 'İşlem imzalanamadı');\r\n      }\r\n      \r\n      // İmzalanmış işlemi yayınla\r\n      const broadcastResponse = await window.walletAPI.broadcastTransaction(\r\n        activeNetwork.isToken ? activeNetwork.network : activeNetwork.id,\r\n        signResponse.signed_tx\r\n      );\r\n      \r\n      if (!broadcastResponse.success) {\r\n        throw new Error(broadcastResponse.error || 'İşlem yayınlanamadı');\r\n      }\r\n      \r\n      // İşlem başarılı\r\n      const newTx = {\r\n        id: broadcastResponse.tx_hash,\r\n        date: new Date().toLocaleDateString('tr-TR'),\r\n        time: new Date().toLocaleTimeString('tr-TR'),\r\n        type: 'send',\r\n        amount: amount,\r\n        currency: activeNetwork.symbol,\r\n        status: 'completed',\r\n        to,\r\n        fee: createTxResponse.tx.fee\r\n      };\r\n      \r\n      // İşlemi transactions listesine ekle\r\n      setWalletData(prev => ({\r\n        ...prev,\r\n        transactions: [newTx, ...prev.transactions]\r\n      }));\r\n      \r\n      // Bakiyeleri güncelle\r\n      setTimeout(() => {\r\n        fetchBalancesWithWalletAPI();\r\n      }, 5000); // 5 saniye sonra bakiyeleri güncelle (blockchain onayları için bekliyoruz)\r\n      \r\n      // Modali kapat\r\n      setIsShowingSend(false);\r\n      \r\n    } catch (error) {\r\n      console.error('Transaction error:', error);\r\n      alert(`İşlem hatası: ${error.message}`);\r\n    } finally {\r\n      setIsProcessingTransaction(false);\r\n    }\r\n  };\r\n\r\n  // Adres oluşturma\r\n  const generateAddress = () => {\r\n    setIsGeneratingAddress(true);\r\n    \r\n    // Adres oluşturma simüle et (gerçek implementasyonda wallet-engine kullanılacak)\r\n    setTimeout(() => {\r\n      const dummyAddresses = {\r\n        bitcoin: '1A1zP1eP5QGefi2DMPTfTL5SLmv7DivfNa',\r\n        ethereum: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e',\r\n        tron: 'TJA1VnRyu97C4JfYMZ2ToQnXrYzMDpP3s9',\r\n        binance: 'bnb1c6aqe8zd3qe5zk5z77j0lkrw5mkzrm4n8jlte3',\r\n        solana: '6uGzhGHXwZYrMZw3zGGqbF6o3FvuPLuTNcSxwdKTKv7D',\r\n        tether_trc20: 'TJA1VnRyu97C4JfYMZ2ToQnXrYzMDpP3s9',\r\n        tether_erc20: '0x742d35Cc6634C0532925a3b844Bc454e4438f44e'\r\n      };\r\n      \r\n      const updatedNetworks = walletData.networks.map(network => {\r\n        return {\r\n          ...network,\r\n          addresses: network.id === activeNetworkId ? \r\n            [dummyAddresses[network.id] || dummyAddresses.bitcoin] : \r\n            network.addresses\r\n        };\r\n      });\r\n      \r\n      setWalletData(prev => ({\r\n        ...prev,\r\n        networks: updatedNetworks\r\n      }));\r\n      \r\n      setIsGeneratingAddress(false);\r\n    }, 2000);\r\n  };\r\n\r\n  // İşlem ekleme\r\n  const addTransaction = (type, amount, to = null) => {\r\n    const newTx = {\r\n      id: `tx-${Date.now()}`,\r\n      date: new Date().toLocaleDateString('tr-TR'),\r\n      time: new Date().toLocaleTimeString('tr-TR'),\r\n      type,\r\n      amount,\r\n      currency: activeNetwork.symbol,\r\n      status: 'pending',\r\n      to\r\n    };\r\n    \r\n    // Önce işlemi ekle\r\n    setWalletData(prev => ({\r\n      ...prev,\r\n      transactions: [newTx, ...prev.transactions]\r\n    }));\r\n    \r\n    // 3 saniye sonra işlemi tamamlanmış olarak güncelle\r\n    setTimeout(() => {\r\n      setWalletData(prev => {\r\n        // İşlemi güncelle\r\n        const updatedTransactions = prev.transactions.map(tx => \r\n          tx.id === newTx.id ? {...tx, status: 'completed'} : tx\r\n        );\r\n        \r\n        // Gönderim ise bakiyeyi azalt, değilse artır\r\n        const updatedNetworks = prev.networks.map(network => {\r\n          if (network.id === activeNetworkId) {\r\n            const balanceChange = type === 'send' ? -amount : amount;\r\n            return {\r\n              ...network,\r\n              balance: parseFloat((network.balance + balanceChange).toFixed(8))\r\n            };\r\n          }\r\n          return network;\r\n        });\r\n        \r\n        // Toplam cüzdan değerini güncelle\r\n        const totalBalance = updatedNetworks.reduce((total, network) => {\r\n          return total + (network.balance * network.price);\r\n        }, 0);\r\n        \r\n        return {\r\n          networks: updatedNetworks,\r\n          transactions: updatedTransactions,\r\n          totalBalance\r\n        };\r\n      });\r\n    }, 3000);\r\n  };\r\n\r\n  // İşlem gönderme handler'ı\r\n  const handleSend = (to, amount) => {\r\n    if (!activeNetwork.addresses.length) {\r\n      alert('Gönderim yapmak için önce bir adres oluşturmalısınız.');\r\n      return;\r\n    }\r\n    \r\n    sendTransaction(to, amount);\r\n  };\r\n\r\n  // Para alma simülasyonu\r\n  const handleReceiveTest = () => {\r\n    if (!activeNetwork.addresses.length) {\r\n      alert('Para almak için önce bir adres oluşturmalısınız.');\r\n      return;\r\n    }\r\n    \r\n    const testAmount = parseFloat((Math.random() * 0.1).toFixed(8));\r\n    addTransaction('receive', testAmount);\r\n    setIsShowingReceive(false);\r\n  };\r\n\r\n  // Arama işlevini yönet\r\n  const handleSearch = (e) => {\r\n    setSearchTerm(e.target.value);\r\n  };\r\n\r\n  // Arama sonuçlarını filtrele\r\n  const filteredAssets = walletData.networks.filter(network => \r\n    network.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    network.symbol.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  // Favori değiştirme\r\n  const toggleFavorite = (id) => {\r\n    setWalletData(prev => ({\r\n      ...prev,\r\n      networks: prev.networks.map(network => \r\n        network.id === id ? {...network, isFavorite: !network.isFavorite} : network\r\n      )\r\n    }));\r\n  };\r\n\r\n  // Token ekleme işlevi\r\n  const handleAddToken = (tokenInfo) => {\r\n    if (tokenInfo.success && tokenInfo.token) {\r\n      const newToken = {\r\n        id: tokenInfo.token.id,\r\n        name: tokenInfo.token.name,\r\n        symbol: tokenInfo.token.symbol,\r\n        iconUrl: require('../assets/btc.png'), // Varsayılan token ikonu\r\n        networkIcon: getNetworkIcon(tokenInfo.token.network),\r\n        network: tokenInfo.token.network,\r\n        balance: tokenInfo.token.balance || 0,\r\n        price: tokenInfo.token.price || 0,\r\n        change24h: tokenInfo.token.change24h || 0,\r\n        addresses: walletData.networks.find(n => n.id === tokenInfo.token.network)?.addresses || [],\r\n        isFavorite: false,\r\n        isToken: true,\r\n        tokenAddress: tokenInfo.token.tokenAddress,\r\n        decimals: tokenInfo.token.decimals || 18\r\n      };\r\n      \r\n      setWalletData(prev => ({\r\n        ...prev,\r\n        networks: [...prev.networks, newToken]\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Network ikonu alma yardımcı fonksiyonu\r\n  const getNetworkIcon = (networkId) => {\r\n    const iconMap = {\r\n      'ETH': require('../assets/eth.png'),\r\n      'TRX': require('../assets/trx.png'),\r\n      'BSC': require('../assets/bnb.png'),\r\n      'SOL': require('../assets/sol.png')\r\n    };\r\n    \r\n    // unknown-network.png yerine varsayılan olarak eth.png kullan\r\n    return iconMap[networkId] || require('../assets/btc.png');\r\n  };\r\n\r\n  // Yeni token ekleme/hesap ekranını göster\r\n  const handleAddNewAccount = (networkId) => {\r\n    // networkId burada \"ethereum\", \"tron\", \"binance\" gibi ana blockchain ID'si olacak\r\n    setActiveNetwork(networkId);\r\n    setIsShowingAddToken(true);\r\n  };\r\n\r\n  // Token otomatik tespit etme\r\n  const autoDetectTokens = async (networkCode, address) => {\r\n    try {\r\n      setIsLoadingBalances(true);\r\n      \r\n      // Test modu\r\n      if (!window.walletAPI) {\r\n        console.warn(\"walletAPI not found, using simulated token detection\");\r\n        // 2 saniye simüle\r\n        setTimeout(() => {\r\n          // Örnek token listesi\r\n          const sampleTokens = [\r\n            {\r\n              id: `sample_token1_${networkCode.toLowerCase()}`,\r\n              name: \"Sample Token 1\",\r\n              symbol: \"ST1\",\r\n              network: networkCode,\r\n              tokenAddress: \"0x1234567890abcdef1234567890abcdef12345678\",\r\n              decimals: 18,\r\n              balance: 125.45\r\n            },\r\n            {\r\n              id: `sample_token2_${networkCode.toLowerCase()}`,\r\n              name: \"Sample Token 2\",\r\n              symbol: \"ST2\",\r\n              network: networkCode,\r\n              tokenAddress: \"0xabcdef1234567890abcdef1234567890abcdef12\",\r\n              decimals: 8,\r\n              balance: 50.75\r\n            }\r\n          ];\r\n          \r\n          // Yeni tokenları ekle\r\n          const updatedNetworks = [...walletData.networks];\r\n          \r\n          sampleTokens.forEach(token => {\r\n            // Token zaten eklenmişse atlayın\r\n            if (!updatedNetworks.find(n => n.tokenAddress === token.tokenAddress)) {\r\n              updatedNetworks.push({\r\n                id: token.id,\r\n                name: token.name,\r\n                symbol: token.symbol,\r\n                iconUrl: require('../assets/btc.png'),\r\n                networkIcon: getNetworkIcon(token.network),\r\n                network: token.network,\r\n                balance: token.balance,\r\n                price: 1.0, // Örnek fiyat\r\n                change24h: 0,\r\n                addresses: [address],\r\n                isFavorite: false,\r\n                isToken: true,\r\n                tokenAddress: token.tokenAddress,\r\n                decimals: token.decimals\r\n              });\r\n            }\r\n          });\r\n          \r\n          setWalletData(prev => ({\r\n            ...prev,\r\n            networks: updatedNetworks\r\n          }));\r\n          \r\n          setIsLoadingBalances(false);\r\n        }, 2000);\r\n        return;\r\n      }\r\n      \r\n      // Gerçek token algılama\r\n      const networkAddress = getNetworkAddress(networkCode);\r\n      if (!networkAddress) {\r\n        throw new Error(`${networkCode} ağı için adres bulunamadı`);\r\n      }\r\n      \r\n      const response = await BlockchainAPI.Tokens.autoDetectTokens(networkCode, networkAddress);\r\n      \r\n      if (response.success && response.tokens) {\r\n        // Yeni tokenları ekle\r\n        const updatedNetworks = [...walletData.networks];\r\n        \r\n        response.tokens.forEach(token => {\r\n          // Token zaten eklenmişse atlayın\r\n          if (!updatedNetworks.find(n => n.tokenAddress === token.tokenAddress)) {\r\n            updatedNetworks.push({\r\n              id: `${token.symbol.toLowerCase()}_${networkCode.toLowerCase()}`,\r\n              name: token.name,\r\n              symbol: token.symbol,\r\n              iconUrl: require('../assets/btc.png'),\r\n              networkIcon: getNetworkIcon(networkCode),\r\n              network: networkCode,\r\n              balance: token.balance || 0,\r\n              price: 1.0, // Varsayılan fiyat, gerçek fiyat daha sonra güncellenecek\r\n              change24h: 0,\r\n              addresses: [networkAddress],\r\n              isFavorite: false,\r\n              isToken: true,\r\n              tokenAddress: token.tokenAddress,\r\n              decimals: token.decimals\r\n            });\r\n          }\r\n        });\r\n        \r\n        setWalletData(prev => ({\r\n          ...prev,\r\n          networks: updatedNetworks\r\n        }));\r\n      }\r\n    } catch (error) {\r\n      console.error('Token detection error:', error);\r\n      setError(`Token'lar algılanırken bir hata oluştu: ${error.message}`);\r\n    } finally {\r\n      setIsLoadingBalances(false);\r\n    }\r\n  };\r\n\r\n  // Ağ adresini alma yardımcı fonksiyonu\r\n  const getNetworkAddress = (networkCode) => {\r\n    // networkCode: 'ETH', 'TRX', 'BSC', 'SOL' gibi\r\n    const networkMapping = {\r\n      'ETH': 'ethereum',\r\n      'TRX': 'tron',\r\n      'BSC': 'binance',\r\n      'SOL': 'solana'\r\n    };\r\n    \r\n    const networkId = networkMapping[networkCode];\r\n    if (!networkId) return null;\r\n    \r\n    const network = walletData.networks.find(n => n.id === networkId);\r\n    return network?.addresses[0] || null;\r\n  };\r\n\r\n  // useEffect içinde aktif wallet ID'sini localStorage'dan alalım\r\n  useEffect(() => {\r\n    const activeWalletId = localStorage.getItem('activeWalletId');\r\n    if (activeWalletId) {\r\n      console.log('Active wallet ID:', activeWalletId);\r\n    } else {\r\n      console.warn('No active wallet ID found');\r\n    }\r\n  }, []);\r\n\r\n  // activeNetwork'ü güncelle\r\n  useEffect(() => {\r\n    const currentNetwork = walletData.networks.find(n => n.id === activeNetworkId) || walletData.networks[0];\r\n    setActiveNetwork(currentNetwork);\r\n  }, [activeNetworkId, walletData.networks]);\r\n\r\n  // fetchBalances fonksiyonunu ekleyin (fetchBalancesWithWalletAPI üzerinden çağıracak)\r\n  const fetchBalances = () => {\r\n    try {\r\n      // Test modunda simüle edilmiş bakiyeler\r\n      if (!window.walletAPI) {\r\n        console.warn(\"walletAPI not found, using simulated balances\");\r\n        \r\n        const simulatedNetworks = walletData.networks.map(network => {\r\n          return {\r\n            ...network,\r\n            balance: Math.random() * (network.id === 'bitcoin' ? 0.1 : network.id === 'ethereum' ? 1 : 10)\r\n          };\r\n        });\r\n        \r\n        setWalletData(prev => ({\r\n          ...prev,\r\n          networks: simulatedNetworks,\r\n          totalBalance: simulatedNetworks.reduce((total, network) => \r\n            total + (network.balance * network.price), 0)\r\n        }));\r\n        \r\n        setIsLoadingBalances(false);\r\n        return;\r\n      }\r\n      \r\n      // Gerçek API çağrısı\r\n      fetchBalancesWithWalletAPI();\r\n    } catch (error) {\r\n      console.error('Error in fetchBalances:', error);\r\n      setIsLoadingBalances(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"dashboard-container\">\r\n      {/* Title Bar */}\r\n      <TitleBar title=\"Exchange Global - Cold Wallet\" />\r\n      \r\n      <div className=\"dashboard-content\">\r\n        {/* Side Menu */}\r\n        <SideMenu \r\n          networks={walletData.networks || []} \r\n          activeNetworkId={activeNetworkId}\r\n          totalBalance={walletData.totalBalance || 0}\r\n          onNetworkSelect={setActiveNetworkId}\r\n          onAddNewAccount={handleAddNewAccount}\r\n        />\r\n        \r\n        {/* Main Content */}\r\n        <div className=\"main-content\">\r\n          <WalletHeader \r\n            searchTerm={searchTerm}\r\n            onSearch={handleSearch}\r\n            activeTab={activeTab}\r\n            onTabChange={setActiveTab}\r\n          />\r\n          \r\n          <div className=\"assets-container\">\r\n            <AssetList \r\n              networks={walletData.networks || []} \r\n              onSelectAsset={setActiveNetworkId}\r\n              selectedAssetId={activeNetworkId}\r\n              searchTerm={searchTerm}\r\n              onToggleFavorite={toggleFavorite}\r\n              activeTab={activeTab}\r\n            />\r\n            \r\n            {activeNetwork && (\r\n              <AssetDetail \r\n                asset={activeNetwork} \r\n                onSend={() => setIsShowingSend(true)}\r\n                onReceive={() => setIsShowingReceive(true)}\r\n                onGenerateAddress={generateAddress}\r\n                isGeneratingAddress={isGeneratingAddress}\r\n                transactions={\r\n                  walletData.transactions\r\n                    .filter(tx => tx.network === activeNetwork.id)\r\n                    .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\r\n                }\r\n              />\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n      \r\n      {/* Modals */}\r\n      {isShowingSend && activeNetwork && (\r\n        <SendModal \r\n          onClose={() => setIsShowingSend(false)}\r\n          asset={activeNetwork}\r\n          onSend={handleSend}\r\n          fee={transactionFee}\r\n          processing={isProcessingTransaction}\r\n        />\r\n      )}\r\n      \r\n      {isShowingReceive && activeNetwork && (\r\n        <ReceiveModal \r\n          onClose={() => setIsShowingReceive(false)} \r\n          asset={activeNetwork}\r\n          onTest={handleReceiveTest}\r\n        />\r\n      )}\r\n      \r\n      {isShowingSettings && (\r\n        <SettingsModal onClose={() => setIsShowingSettings(false)} />\r\n      )}\r\n      \r\n      {isShowingAddToken && (\r\n        <TokenAddModal \r\n          onClose={() => setIsShowingAddToken(false)}\r\n          onAdd={handleAddToken}\r\n          supportedNetworks={['ETH', 'TRX', 'BSC']}\r\n          tokenDefinitions={TOKEN_DEFINITIONS}\r\n          onAutoDetect={autoDetectTokens}\r\n          getNetworkAddress={getNetworkAddress}\r\n        />\r\n      )}\r\n      \r\n      {error && (\r\n        <div className=\"error-notification\">\r\n          <div className=\"error-message\">{error}</div>\r\n          <button onClick={() => setError('')}>Kapat</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}