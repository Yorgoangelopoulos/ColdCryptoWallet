{"ast":null,"code":"/**\r\n * BlockchainAPI.js\r\n * Çeşitli blockchainler için API bağlantıları\r\n */import axios from'axios';// API endpoints for different networks\nconst API_ENDPOINTS={ETH:'https://api.etherscan.io/api',TRX:'https://apilist.tronscan.org/api',BTC:'https://blockchain.info',BSC:'https://api.bscscan.com/api',SOL:'https://api.mainnet-beta.solana.com'};// API keys - in production these should be secured properly\nconst API_KEYS={ETH:'YOUR_ETHERSCAN_API_KEY',BSC:'YOUR_BSCSCAN_API_KEY'};class BlockchainAPI{// Get native token balance\nstatic async getBalance(network,address){try{switch(network){case'ETH':const ethRes=await axios.get(\"\".concat(API_ENDPOINTS.ETH,\"?module=account&action=balance&address=\").concat(address,\"&tag=latest&apikey=\").concat(API_KEYS.ETH));return ethRes.data.status==='1'?ethRes.data.result/1e18:0;case'TRX':const tronRes=await axios.get(\"\".concat(API_ENDPOINTS.TRX,\"/account?address=\").concat(address));return tronRes.data.balance?tronRes.data.balance/1e6:0;case'BTC':const btcRes=await axios.get(\"\".concat(API_ENDPOINTS.BTC,\"/rawaddr/\").concat(address));return btcRes.data.final_balance/1e8;case'BSC':const bscRes=await axios.get(\"\".concat(API_ENDPOINTS.BSC,\"?module=account&action=balance&address=\").concat(address,\"&tag=latest&apikey=\").concat(API_KEYS.BSC));return bscRes.data.status==='1'?bscRes.data.result/1e18:0;case'SOL':const solReq={jsonrpc:'2.0',id:1,method:'getBalance',params:[address]};const solRes=await axios.post(API_ENDPOINTS.SOL,solReq);return solRes.data.result.value/1e9;default:throw new Error(\"Unsupported network: \".concat(network));}}catch(error){console.error(\"Error fetching \".concat(network,\" balance:\"),error);return 0;}}// Get token balance for ERC20, TRC20, BEP20 tokens\nstatic async getTokenBalance(network,address,tokenAddress){let decimals=arguments.length>3&&arguments[3]!==undefined?arguments[3]:18;try{switch(network){case'ETH':const ethRes=await axios.get(\"\".concat(API_ENDPOINTS.ETH,\"?module=account&action=tokenbalance&contractaddress=\").concat(tokenAddress,\"&address=\").concat(address,\"&tag=latest&apikey=\").concat(API_KEYS.ETH));return ethRes.data.status==='1'?ethRes.data.result/Math.pow(10,decimals):0;case'TRX':const tronRes=await axios.get(\"\".concat(API_ENDPOINTS.TRX,\"/account/tokens?address=\").concat(address));const token=tronRes.data.data.find(t=>t.tokenId===tokenAddress||t.contractAddress===tokenAddress);return token?token.balance/Math.pow(10,decimals):0;case'BSC':const bscRes=await axios.get(\"\".concat(API_ENDPOINTS.BSC,\"?module=account&action=tokenbalance&contractaddress=\").concat(tokenAddress,\"&address=\").concat(address,\"&tag=latest&apikey=\").concat(API_KEYS.BSC));return bscRes.data.status==='1'?bscRes.data.result/Math.pow(10,decimals):0;default:throw new Error(\"Unsupported token network: \".concat(network));}}catch(error){console.error(\"Error fetching \".concat(network,\" token balance:\"),error);return 0;}}// Auto-detect tokens for an address (popular tokens on each network)\nstatic async detectTokens(network,address){try{switch(network){case'ETH':// Get ERC20 token transactions to detect tokens\nconst ethRes=await axios.get(\"\".concat(API_ENDPOINTS.ETH,\"?module=account&action=tokentx&address=\").concat(address,\"&sort=desc&apikey=\").concat(API_KEYS.ETH));if(ethRes.data.status==='1'){const tokens={};ethRes.data.result.forEach(tx=>{if(!tokens[tx.contractAddress]){tokens[tx.contractAddress]={address:tx.contractAddress,name:tx.tokenName,symbol:tx.tokenSymbol,decimals:parseInt(tx.tokenDecimal)};}});return Object.values(tokens);}return[];case'TRX':const tronRes=await axios.get(\"\".concat(API_ENDPOINTS.TRX,\"/account/tokens?address=\").concat(address));return tronRes.data.data.map(token=>({address:token.tokenId||token.contractAddress,name:token.name,symbol:token.tokenAbbr,decimals:token.tokenDecimal||6}));case'BSC':const bscRes=await axios.get(\"\".concat(API_ENDPOINTS.BSC,\"?module=account&action=tokentx&address=\").concat(address,\"&sort=desc&apikey=\").concat(API_KEYS.BSC));if(bscRes.data.status==='1'){const tokens={};bscRes.data.result.forEach(tx=>{if(!tokens[tx.contractAddress]){tokens[tx.contractAddress]={address:tx.contractAddress,name:tx.tokenName,symbol:tx.tokenSymbol,decimals:parseInt(tx.tokenDecimal)};}});return Object.values(tokens);}return[];default:return[];}}catch(error){console.error(\"Error detecting \".concat(network,\" tokens:\"),error);return[];}}// Get transaction history\nstatic async getTransactions(network,address){try{switch(network){case'ETH':const ethTxRes=await axios.get(\"\".concat(API_ENDPOINTS.ETH,\"?module=account&action=txlist&address=\").concat(address,\"&sort=desc&apikey=\").concat(API_KEYS.ETH));if(ethTxRes.data.status==='1'){return ethTxRes.data.result.map(tx=>({hash:tx.hash,from:tx.from,to:tx.to,value:tx.value/1e18,timestamp:parseInt(tx.timeStamp)*1000,isSuccess:tx.isError==='0'}));}return[];case'TRX':const tronTxRes=await axios.get(\"\".concat(API_ENDPOINTS.TRX,\"/transaction?sort=-timestamp&limit=20&address=\").concat(address));return tronTxRes.data.data.map(tx=>({hash:tx.hash,from:tx.ownerAddress,to:tx.toAddress||'',value:tx.amount/1e6,timestamp:tx.timestamp,isSuccess:tx.confirmed}));case'BTC':const btcTxRes=await axios.get(\"\".concat(API_ENDPOINTS.BTC,\"/rawaddr/\").concat(address));return btcTxRes.data.txs.map(tx=>{var _tx$inputs$,_tx$inputs$$prev_out,_tx$out$;// Calculate net value for this address\nlet value=0;tx.inputs.forEach(input=>{if(input.prev_out.addr===address){value-=input.prev_out.value;}});tx.out.forEach(output=>{if(output.addr===address){value+=output.value;}});return{hash:tx.hash,from:((_tx$inputs$=tx.inputs[0])===null||_tx$inputs$===void 0?void 0:(_tx$inputs$$prev_out=_tx$inputs$.prev_out)===null||_tx$inputs$$prev_out===void 0?void 0:_tx$inputs$$prev_out.addr)||'Unknown',to:((_tx$out$=tx.out[0])===null||_tx$out$===void 0?void 0:_tx$out$.addr)||'Unknown',value:Math.abs(value)/1e8,timestamp:tx.time*1000,isSuccess:true,direction:value<0?'out':'in'};});default:throw new Error(\"Unsupported network for transactions: \".concat(network));}}catch(error){console.error(\"Error fetching \".concat(network,\" transactions:\"),error);return[];}}// Get token information (name, symbol, decimals)\nstatic async getTokenInfo(network,tokenAddress){try{switch(network){case'ETH':const res=await Promise.all([axios.get(\"\".concat(API_ENDPOINTS.ETH,\"?module=token&action=gettokeninfo&contractaddress=\").concat(tokenAddress,\"&apikey=\").concat(API_KEYS.ETH)),axios.get(\"\".concat(API_ENDPOINTS.ETH,\"?module=stats&action=tokensupply&contractaddress=\").concat(tokenAddress,\"&apikey=\").concat(API_KEYS.ETH))]);const tokenInfo=res[0].data.result;const supply=res[1].data.result;return{name:tokenInfo.name,symbol:tokenInfo.symbol,decimals:parseInt(tokenInfo.decimals),totalSupply:supply/Math.pow(10,parseInt(tokenInfo.decimals))};default:throw new Error(\"Unsupported network for token info: \".concat(network));}}catch(error){console.error(\"Error fetching token info for \".concat(network,\":\"),error);return null;}}// Get current market prices for cryptocurrencies\nstatic async getPrices(coinIds){try{const idsString=coinIds.join(',');const res=await axios.get(\"https://api.coingecko.com/api/v3/simple/price?ids=\".concat(idsString,\"&vs_currencies=usd&include_24hr_change=true\"));return res.data;}catch(error){console.error('Error fetching prices:',error);return{};}}}export default BlockchainAPI;","map":{"version":3,"names":["axios","API_ENDPOINTS","ETH","TRX","BTC","BSC","SOL","API_KEYS","BlockchainAPI","getBalance","network","address","ethRes","get","concat","data","status","result","tronRes","balance","btcRes","final_balance","bscRes","solReq","jsonrpc","id","method","params","solRes","post","value","Error","error","console","getTokenBalance","tokenAddress","decimals","arguments","length","undefined","Math","pow","token","find","t","tokenId","contractAddress","detectTokens","tokens","forEach","tx","name","tokenName","symbol","tokenSymbol","parseInt","tokenDecimal","Object","values","map","tokenAbbr","getTransactions","ethTxRes","hash","from","to","timestamp","timeStamp","isSuccess","isError","tronTxRes","ownerAddress","toAddress","amount","confirmed","btcTxRes","txs","_tx$inputs$","_tx$inputs$$prev_out","_tx$out$","inputs","input","prev_out","addr","out","output","abs","time","direction","getTokenInfo","res","Promise","all","tokenInfo","supply","totalSupply","getPrices","coinIds","idsString","join"],"sources":["C:/Cold_Wallet/wallet-app/src/services/BlockchainAPI.js"],"sourcesContent":["/**\r\n * BlockchainAPI.js\r\n * Çeşitli blockchainler için API bağlantıları\r\n */\r\n\r\nimport axios from 'axios';\r\n\r\n// API endpoints for different networks\r\nconst API_ENDPOINTS = {\r\n  ETH: 'https://api.etherscan.io/api',\r\n  TRX: 'https://apilist.tronscan.org/api',\r\n  BTC: 'https://blockchain.info',\r\n  BSC: 'https://api.bscscan.com/api',\r\n  SOL: 'https://api.mainnet-beta.solana.com'\r\n};\r\n\r\n// API keys - in production these should be secured properly\r\nconst API_KEYS = {\r\n  ETH: 'YOUR_ETHERSCAN_API_KEY',\r\n  BSC: 'YOUR_BSCSCAN_API_KEY'\r\n};\r\n\r\nclass BlockchainAPI {\r\n  // Get native token balance\r\n  static async getBalance(network, address) {\r\n    try {\r\n      switch(network) {\r\n        case 'ETH':\r\n          const ethRes = await axios.get(`${API_ENDPOINTS.ETH}?module=account&action=balance&address=${address}&tag=latest&apikey=${API_KEYS.ETH}`);\r\n          return ethRes.data.status === '1' ? (ethRes.data.result / 1e18) : 0;\r\n          \r\n        case 'TRX':\r\n          const tronRes = await axios.get(`${API_ENDPOINTS.TRX}/account?address=${address}`);\r\n          return tronRes.data.balance ? (tronRes.data.balance / 1e6) : 0;\r\n          \r\n        case 'BTC':\r\n          const btcRes = await axios.get(`${API_ENDPOINTS.BTC}/rawaddr/${address}`);\r\n          return btcRes.data.final_balance / 1e8;\r\n          \r\n        case 'BSC':\r\n          const bscRes = await axios.get(`${API_ENDPOINTS.BSC}?module=account&action=balance&address=${address}&tag=latest&apikey=${API_KEYS.BSC}`);\r\n          return bscRes.data.status === '1' ? (bscRes.data.result / 1e18) : 0;\r\n          \r\n        case 'SOL':\r\n          const solReq = {\r\n            jsonrpc: '2.0',\r\n            id: 1,\r\n            method: 'getBalance',\r\n            params: [address]\r\n          };\r\n          const solRes = await axios.post(API_ENDPOINTS.SOL, solReq);\r\n          return solRes.data.result.value / 1e9;\r\n          \r\n        default:\r\n          throw new Error(`Unsupported network: ${network}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching ${network} balance:`, error);\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  // Get token balance for ERC20, TRC20, BEP20 tokens\r\n  static async getTokenBalance(network, address, tokenAddress, decimals = 18) {\r\n    try {\r\n      switch(network) {\r\n        case 'ETH':\r\n          const ethRes = await axios.get(\r\n            `${API_ENDPOINTS.ETH}?module=account&action=tokenbalance&contractaddress=${tokenAddress}&address=${address}&tag=latest&apikey=${API_KEYS.ETH}`\r\n          );\r\n          return ethRes.data.status === '1' ? (ethRes.data.result / Math.pow(10, decimals)) : 0;\r\n          \r\n        case 'TRX':\r\n          const tronRes = await axios.get(`${API_ENDPOINTS.TRX}/account/tokens?address=${address}`);\r\n          const token = tronRes.data.data.find(t => t.tokenId === tokenAddress || t.contractAddress === tokenAddress);\r\n          return token ? (token.balance / Math.pow(10, decimals)) : 0;\r\n          \r\n        case 'BSC':\r\n          const bscRes = await axios.get(\r\n            `${API_ENDPOINTS.BSC}?module=account&action=tokenbalance&contractaddress=${tokenAddress}&address=${address}&tag=latest&apikey=${API_KEYS.BSC}`\r\n          );\r\n          return bscRes.data.status === '1' ? (bscRes.data.result / Math.pow(10, decimals)) : 0;\r\n          \r\n        default:\r\n          throw new Error(`Unsupported token network: ${network}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching ${network} token balance:`, error);\r\n      return 0;\r\n    }\r\n  }\r\n  \r\n  // Auto-detect tokens for an address (popular tokens on each network)\r\n  static async detectTokens(network, address) {\r\n    try {\r\n      switch(network) {\r\n        case 'ETH':\r\n          // Get ERC20 token transactions to detect tokens\r\n          const ethRes = await axios.get(\r\n            `${API_ENDPOINTS.ETH}?module=account&action=tokentx&address=${address}&sort=desc&apikey=${API_KEYS.ETH}`\r\n          );\r\n          \r\n          if (ethRes.data.status === '1') {\r\n            const tokens = {};\r\n            \r\n            ethRes.data.result.forEach(tx => {\r\n              if (!tokens[tx.contractAddress]) {\r\n                tokens[tx.contractAddress] = {\r\n                  address: tx.contractAddress,\r\n                  name: tx.tokenName,\r\n                  symbol: tx.tokenSymbol,\r\n                  decimals: parseInt(tx.tokenDecimal)\r\n                };\r\n              }\r\n            });\r\n            \r\n            return Object.values(tokens);\r\n          }\r\n          return [];\r\n          \r\n        case 'TRX':\r\n          const tronRes = await axios.get(`${API_ENDPOINTS.TRX}/account/tokens?address=${address}`);\r\n          return tronRes.data.data.map(token => ({\r\n            address: token.tokenId || token.contractAddress,\r\n            name: token.name,\r\n            symbol: token.tokenAbbr,\r\n            decimals: token.tokenDecimal || 6\r\n          }));\r\n          \r\n        case 'BSC':\r\n          const bscRes = await axios.get(\r\n            `${API_ENDPOINTS.BSC}?module=account&action=tokentx&address=${address}&sort=desc&apikey=${API_KEYS.BSC}`\r\n          );\r\n          \r\n          if (bscRes.data.status === '1') {\r\n            const tokens = {};\r\n            \r\n            bscRes.data.result.forEach(tx => {\r\n              if (!tokens[tx.contractAddress]) {\r\n                tokens[tx.contractAddress] = {\r\n                  address: tx.contractAddress,\r\n                  name: tx.tokenName,\r\n                  symbol: tx.tokenSymbol,\r\n                  decimals: parseInt(tx.tokenDecimal)\r\n                };\r\n              }\r\n            });\r\n            \r\n            return Object.values(tokens);\r\n          }\r\n          return [];\r\n          \r\n        default:\r\n          return [];\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error detecting ${network} tokens:`, error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  // Get transaction history\r\n  static async getTransactions(network, address) {\r\n    try {\r\n      switch(network) {\r\n        case 'ETH':\r\n          const ethTxRes = await axios.get(\r\n            `${API_ENDPOINTS.ETH}?module=account&action=txlist&address=${address}&sort=desc&apikey=${API_KEYS.ETH}`\r\n          );\r\n          \r\n          if (ethTxRes.data.status === '1') {\r\n            return ethTxRes.data.result.map(tx => ({\r\n              hash: tx.hash,\r\n              from: tx.from,\r\n              to: tx.to,\r\n              value: tx.value / 1e18,\r\n              timestamp: parseInt(tx.timeStamp) * 1000,\r\n              isSuccess: tx.isError === '0'\r\n            }));\r\n          }\r\n          return [];\r\n          \r\n        case 'TRX':\r\n          const tronTxRes = await axios.get(`${API_ENDPOINTS.TRX}/transaction?sort=-timestamp&limit=20&address=${address}`);\r\n          return tronTxRes.data.data.map(tx => ({\r\n            hash: tx.hash,\r\n            from: tx.ownerAddress,\r\n            to: tx.toAddress || '',\r\n            value: tx.amount / 1e6,\r\n            timestamp: tx.timestamp,\r\n            isSuccess: tx.confirmed\r\n          }));\r\n          \r\n        case 'BTC':\r\n          const btcTxRes = await axios.get(`${API_ENDPOINTS.BTC}/rawaddr/${address}`);\r\n          return btcTxRes.data.txs.map(tx => {\r\n            // Calculate net value for this address\r\n            let value = 0;\r\n            tx.inputs.forEach(input => {\r\n              if (input.prev_out.addr === address) {\r\n                value -= input.prev_out.value;\r\n              }\r\n            });\r\n            tx.out.forEach(output => {\r\n              if (output.addr === address) {\r\n                value += output.value;\r\n              }\r\n            });\r\n            \r\n            return {\r\n              hash: tx.hash,\r\n              from: tx.inputs[0]?.prev_out?.addr || 'Unknown',\r\n              to: tx.out[0]?.addr || 'Unknown',\r\n              value: Math.abs(value) / 1e8,\r\n              timestamp: tx.time * 1000,\r\n              isSuccess: true,\r\n              direction: value < 0 ? 'out' : 'in'\r\n            };\r\n          });\r\n          \r\n        default:\r\n          throw new Error(`Unsupported network for transactions: ${network}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching ${network} transactions:`, error);\r\n      return [];\r\n    }\r\n  }\r\n  \r\n  // Get token information (name, symbol, decimals)\r\n  static async getTokenInfo(network, tokenAddress) {\r\n    try {\r\n      switch(network) {\r\n        case 'ETH':\r\n          const res = await Promise.all([\r\n            axios.get(`${API_ENDPOINTS.ETH}?module=token&action=gettokeninfo&contractaddress=${tokenAddress}&apikey=${API_KEYS.ETH}`),\r\n            axios.get(`${API_ENDPOINTS.ETH}?module=stats&action=tokensupply&contractaddress=${tokenAddress}&apikey=${API_KEYS.ETH}`)\r\n          ]);\r\n          \r\n          const tokenInfo = res[0].data.result;\r\n          const supply = res[1].data.result;\r\n          \r\n          return {\r\n            name: tokenInfo.name,\r\n            symbol: tokenInfo.symbol,\r\n            decimals: parseInt(tokenInfo.decimals),\r\n            totalSupply: supply / Math.pow(10, parseInt(tokenInfo.decimals))\r\n          };\r\n          \r\n        default:\r\n          throw new Error(`Unsupported network for token info: ${network}`);\r\n      }\r\n    } catch (error) {\r\n      console.error(`Error fetching token info for ${network}:`, error);\r\n      return null;\r\n    }\r\n  }\r\n  \r\n  // Get current market prices for cryptocurrencies\r\n  static async getPrices(coinIds) {\r\n    try {\r\n      const idsString = coinIds.join(',');\r\n      const res = await axios.get(\r\n        `https://api.coingecko.com/api/v3/simple/price?ids=${idsString}&vs_currencies=usd&include_24hr_change=true`\r\n      );\r\n      \r\n      return res.data;\r\n    } catch (error) {\r\n      console.error('Error fetching prices:', error);\r\n      return {};\r\n    }\r\n  }\r\n}\r\n\r\nexport default BlockchainAPI;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}